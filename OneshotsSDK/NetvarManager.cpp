#include "NetvarManager.h"
#include <fstream>
#include <vector>
#include <string>
#include <iostream>
CNetvar * Netvar = nullptr;

CNetvar::CNetvar()
{
	// These 2 funcs dumped these vars so i could just paste them here. player_array  had issues but that can be manualy fixed :D
	/*DumpStructs();
	DumpStructMembers();*/

	//DumpNetvars(); // this one dumps all the netvars into a file in csgo folder

	DT_TestTraceline.m_clrRender = GetOffset("DT_TestTraceline", "m_clrRender");
	DT_TestTraceline.m_vecOrigin = GetOffset("DT_TestTraceline", "m_vecOrigin");
	DT_TestTraceline.m_angRotation = GetOffset("DT_TestTraceline", "m_angRotation[0]");
	DT_TestTraceline.moveparent = GetOffset("DT_TestTraceline", "moveparent");
	DT_TEWorldDecal.m_vecOrigin = GetOffset("DT_TEWorldDecal", "m_vecOrigin");
	DT_TEWorldDecal.m_nIndex = GetOffset("DT_TEWorldDecal", "m_nIndex");
	DT_TESpriteSpray.m_vecOrigin = GetOffset("DT_TESpriteSpray", "m_vecOrigin");
	DT_TESpriteSpray.m_vecDirection = GetOffset("DT_TESpriteSpray", "m_vecDirection");
	DT_TESpriteSpray.m_nModelIndex = GetOffset("DT_TESpriteSpray", "m_nModelIndex");
	DT_TESpriteSpray.m_fNoise = GetOffset("DT_TESpriteSpray", "m_fNoise");
	DT_TESpriteSpray.m_nCount = GetOffset("DT_TESpriteSpray", "m_nCount");
	DT_TESpriteSpray.m_nSpeed = GetOffset("DT_TESpriteSpray", "m_nSpeed");
	DT_TESprite.m_vecOrigin = GetOffset("DT_TESprite", "m_vecOrigin");
	DT_TESprite.m_nModelIndex = GetOffset("DT_TESprite", "m_nModelIndex");
	DT_TESprite.m_fScale = GetOffset("DT_TESprite", "m_fScale");
	DT_TESprite.m_nBrightness = GetOffset("DT_TESprite", "m_nBrightness");
	DT_TESparks.m_nMagnitude = GetOffset("DT_TESparks", "m_nMagnitude");
	DT_TESparks.m_nTrailLength = GetOffset("DT_TESparks", "m_nTrailLength");
	DT_TESparks.m_vecDir = GetOffset("DT_TESparks", "m_vecDir");
	DT_TESmoke.m_vecOrigin = GetOffset("DT_TESmoke", "m_vecOrigin");
	DT_TESmoke.m_nModelIndex = GetOffset("DT_TESmoke", "m_nModelIndex");
	DT_TESmoke.m_fScale = GetOffset("DT_TESmoke", "m_fScale");
	DT_TESmoke.m_nFrameRate = GetOffset("DT_TESmoke", "m_nFrameRate");
	DT_TEShowLine.m_vecEnd = GetOffset("DT_TEShowLine", "m_vecEnd");
	DT_TEProjectedDecal.m_vecOrigin = GetOffset("DT_TEProjectedDecal", "m_vecOrigin");
	DT_TEProjectedDecal.m_angRotation = GetOffset("DT_TEProjectedDecal", "m_angRotation");
	DT_TEProjectedDecal.m_flDistance = GetOffset("DT_TEProjectedDecal", "m_flDistance");
	DT_TEProjectedDecal.m_nIndex = GetOffset("DT_TEProjectedDecal", "m_nIndex");
	DT_FEPlayerDecal.m_nUniqueID = GetOffset("DT_FEPlayerDecal", "m_nUniqueID");
	DT_FEPlayerDecal.m_unAccountID = GetOffset("DT_FEPlayerDecal", "m_unAccountID");
	DT_FEPlayerDecal.m_unTraceID = GetOffset("DT_FEPlayerDecal", "m_unTraceID");
	DT_FEPlayerDecal.m_rtGcTime = GetOffset("DT_FEPlayerDecal", "m_rtGcTime");
	DT_FEPlayerDecal.m_vecEndPos = GetOffset("DT_FEPlayerDecal", "m_vecEndPos");
	DT_FEPlayerDecal.m_vecStart = GetOffset("DT_FEPlayerDecal", "m_vecStart");
	DT_FEPlayerDecal.m_vecRight = GetOffset("DT_FEPlayerDecal", "m_vecRight");
	DT_FEPlayerDecal.m_vecNormal = GetOffset("DT_FEPlayerDecal", "m_vecNormal");
	DT_FEPlayerDecal.m_nEntity = GetOffset("DT_FEPlayerDecal", "m_nEntity");
	DT_FEPlayerDecal.m_nPlayer = GetOffset("DT_FEPlayerDecal", "m_nPlayer");
	DT_FEPlayerDecal.m_nHitbox = GetOffset("DT_FEPlayerDecal", "m_nHitbox");
	DT_FEPlayerDecal.m_nTintID = GetOffset("DT_FEPlayerDecal", "m_nTintID");
	DT_FEPlayerDecal.m_flCreationTime = GetOffset("DT_FEPlayerDecal", "m_flCreationTime");
	DT_FEPlayerDecal.m_nVersion = GetOffset("DT_FEPlayerDecal", "m_nVersion");
	DT_FEPlayerDecal.m_ubSignature = GetOffset("DT_FEPlayerDecal", "m_ubSignature");
	DT_TEPlayerDecal.m_vecOrigin = GetOffset("DT_TEPlayerDecal", "m_vecOrigin");
	DT_TEPlayerDecal.m_vecStart = GetOffset("DT_TEPlayerDecal", "m_vecStart");
	DT_TEPlayerDecal.m_vecRight = GetOffset("DT_TEPlayerDecal", "m_vecRight");
	DT_TEPlayerDecal.m_nEntity = GetOffset("DT_TEPlayerDecal", "m_nEntity");
	DT_TEPlayerDecal.m_nPlayer = GetOffset("DT_TEPlayerDecal", "m_nPlayer");
	DT_TEPlayerDecal.m_nHitbox = GetOffset("DT_TEPlayerDecal", "m_nHitbox");
	DT_TEPhysicsProp.m_vecOrigin = GetOffset("DT_TEPhysicsProp", "m_vecOrigin");
	DT_TEPhysicsProp.m_angRotation = GetOffset("DT_TEPhysicsProp", "m_angRotation[0]");
	DT_TEPhysicsProp.m_vecVelocity = GetOffset("DT_TEPhysicsProp", "m_vecVelocity");
	DT_TEPhysicsProp.m_nModelIndex = GetOffset("DT_TEPhysicsProp", "m_nModelIndex");
	DT_TEPhysicsProp.m_nFlags = GetOffset("DT_TEPhysicsProp", "m_nFlags");
	DT_TEPhysicsProp.m_nSkin = GetOffset("DT_TEPhysicsProp", "m_nSkin");
	DT_TEPhysicsProp.m_nEffects = GetOffset("DT_TEPhysicsProp", "m_nEffects");
	DT_TEPhysicsProp.m_clrRender = GetOffset("DT_TEPhysicsProp", "m_clrRender");
	DT_TEParticleSystem.m_vecOrigin = GetOffset("DT_TEParticleSystem", "m_vecOrigin[0]");
	DT_TEMuzzleFlash.m_vecOrigin = GetOffset("DT_TEMuzzleFlash", "m_vecOrigin");
	DT_TEMuzzleFlash.m_vecAngles = GetOffset("DT_TEMuzzleFlash", "m_vecAngles");
	DT_TEMuzzleFlash.m_flScale = GetOffset("DT_TEMuzzleFlash", "m_flScale");
	DT_TEMuzzleFlash.m_nType = GetOffset("DT_TEMuzzleFlash", "m_nType");
	DT_TELargeFunnel.m_nModelIndex = GetOffset("DT_TELargeFunnel", "m_nModelIndex");
	DT_TELargeFunnel.m_nReversed = GetOffset("DT_TELargeFunnel", "m_nReversed");
	DT_TEKillPlayerAttachments.m_nPlayer = GetOffset("DT_TEKillPlayerAttachments", "m_nPlayer");
	DT_TEImpact.m_vecOrigin = GetOffset("DT_TEImpact", "m_vecOrigin");
	DT_TEImpact.m_vecNormal = GetOffset("DT_TEImpact", "m_vecNormal");
	DT_TEImpact.m_iType = GetOffset("DT_TEImpact", "m_iType");
	DT_TEImpact.m_ucFlags = GetOffset("DT_TEImpact", "m_ucFlags");
	DT_TEGlowSprite.m_vecOrigin = GetOffset("DT_TEGlowSprite", "m_vecOrigin");
	DT_TEGlowSprite.m_nModelIndex = GetOffset("DT_TEGlowSprite", "m_nModelIndex");
	DT_TEGlowSprite.m_fScale = GetOffset("DT_TEGlowSprite", "m_fScale");
	DT_TEGlowSprite.m_fLife = GetOffset("DT_TEGlowSprite", "m_fLife");
	DT_TEGlowSprite.m_nBrightness = GetOffset("DT_TEGlowSprite", "m_nBrightness");
	DT_TEShatterSurface.m_vecOrigin = GetOffset("DT_TEShatterSurface", "m_vecOrigin");
	DT_TEShatterSurface.m_vecAngles = GetOffset("DT_TEShatterSurface", "m_vecAngles");
	DT_TEShatterSurface.m_vecForce = GetOffset("DT_TEShatterSurface", "m_vecForce");
	DT_TEShatterSurface.m_vecForcePos = GetOffset("DT_TEShatterSurface", "m_vecForcePos");
	DT_TEShatterSurface.m_flWidth = GetOffset("DT_TEShatterSurface", "m_flWidth");
	DT_TEShatterSurface.m_flHeight = GetOffset("DT_TEShatterSurface", "m_flHeight");
	DT_TEShatterSurface.m_flShardSize = GetOffset("DT_TEShatterSurface", "m_flShardSize");
	DT_TEShatterSurface.m_nSurfaceType = GetOffset("DT_TEShatterSurface", "m_nSurfaceType");
	DT_TEShatterSurface.m_uchFrontColor = GetOffset("DT_TEShatterSurface", "m_uchFrontColor[0]");
	DT_TEShatterSurface.m_uchBackColor = GetOffset("DT_TEShatterSurface", "m_uchBackColor[0]");
	DT_TEFootprintDecal.m_vecOrigin = GetOffset("DT_TEFootprintDecal", "m_vecOrigin");
	DT_TEFootprintDecal.m_vecDirection = GetOffset("DT_TEFootprintDecal", "m_vecDirection");
	DT_TEFootprintDecal.m_nEntity = GetOffset("DT_TEFootprintDecal", "m_nEntity");
	DT_TEFootprintDecal.m_nIndex = GetOffset("DT_TEFootprintDecal", "m_nIndex");
	DT_TEFootprintDecal.m_chMaterialType = GetOffset("DT_TEFootprintDecal", "m_chMaterialType");
	DT_TEFizz.m_nEntity = GetOffset("DT_TEFizz", "m_nEntity");
	DT_TEFizz.m_nModelIndex = GetOffset("DT_TEFizz", "m_nModelIndex");
	DT_TEFizz.m_nDensity = GetOffset("DT_TEFizz", "m_nDensity");
	DT_TEFizz.m_nCurrent = GetOffset("DT_TEFizz", "m_nCurrent");
	DT_TEExplosion.m_nModelIndex = GetOffset("DT_TEExplosion", "m_nModelIndex");
	DT_TEExplosion.m_fScale = GetOffset("DT_TEExplosion", "m_fScale");
	DT_TEExplosion.m_nFrameRate = GetOffset("DT_TEExplosion", "m_nFrameRate");
	DT_TEExplosion.m_nFlags = GetOffset("DT_TEExplosion", "m_nFlags");
	DT_TEExplosion.m_vecNormal = GetOffset("DT_TEExplosion", "m_vecNormal");
	DT_TEExplosion.m_chMaterialType = GetOffset("DT_TEExplosion", "m_chMaterialType");
	DT_TEExplosion.m_nRadius = GetOffset("DT_TEExplosion", "m_nRadius");
	DT_TEExplosion.m_nMagnitude = GetOffset("DT_TEExplosion", "m_nMagnitude");
	DT_TEEnergySplash.m_vecPos = GetOffset("DT_TEEnergySplash", "m_vecPos");
	DT_TEEnergySplash.m_vecDir = GetOffset("DT_TEEnergySplash", "m_vecDir");
	DT_TEEnergySplash.m_bExplosive = GetOffset("DT_TEEnergySplash", "m_bExplosive");
	DT_TEEffectDispatch.m_EffectData = GetOffset("DT_TEEffectDispatch", "m_EffectData");
	DT_TEDynamicLight.m_vecOrigin = GetOffset("DT_TEDynamicLight", "m_vecOrigin");
	DT_TEDynamicLight.r = GetOffset("DT_TEDynamicLight", "r");
	DT_TEDynamicLight.g = GetOffset("DT_TEDynamicLight", "g");
	DT_TEDynamicLight.b = GetOffset("DT_TEDynamicLight", "b");
	DT_TEDynamicLight.exponent = GetOffset("DT_TEDynamicLight", "exponent");
	DT_TEDynamicLight.m_fRadius = GetOffset("DT_TEDynamicLight", "m_fRadius");
	DT_TEDynamicLight.m_fTime = GetOffset("DT_TEDynamicLight", "m_fTime");
	DT_TEDynamicLight.m_fDecay = GetOffset("DT_TEDynamicLight", "m_fDecay");
	DT_TEDecal.m_vecOrigin = GetOffset("DT_TEDecal", "m_vecOrigin");
	DT_TEDecal.m_vecStart = GetOffset("DT_TEDecal", "m_vecStart");
	DT_TEDecal.m_nEntity = GetOffset("DT_TEDecal", "m_nEntity");
	DT_TEDecal.m_nHitbox = GetOffset("DT_TEDecal", "m_nHitbox");
	DT_TEDecal.m_nIndex = GetOffset("DT_TEDecal", "m_nIndex");
	DT_TEClientProjectile.m_vecOrigin = GetOffset("DT_TEClientProjectile", "m_vecOrigin");
	DT_TEClientProjectile.m_vecVelocity = GetOffset("DT_TEClientProjectile", "m_vecVelocity");
	DT_TEClientProjectile.m_nModelIndex = GetOffset("DT_TEClientProjectile", "m_nModelIndex");
	DT_TEClientProjectile.m_nLifeTime = GetOffset("DT_TEClientProjectile", "m_nLifeTime");
	DT_TEClientProjectile.m_hOwner = GetOffset("DT_TEClientProjectile", "m_hOwner");
	DT_TEBubbleTrail.m_vecMins = GetOffset("DT_TEBubbleTrail", "m_vecMins");
	DT_TEBubbleTrail.m_vecMaxs = GetOffset("DT_TEBubbleTrail", "m_vecMaxs");
	DT_TEBubbleTrail.m_nModelIndex = GetOffset("DT_TEBubbleTrail", "m_nModelIndex");
	DT_TEBubbleTrail.m_flWaterZ = GetOffset("DT_TEBubbleTrail", "m_flWaterZ");
	DT_TEBubbleTrail.m_nCount = GetOffset("DT_TEBubbleTrail", "m_nCount");
	DT_TEBubbleTrail.m_fSpeed = GetOffset("DT_TEBubbleTrail", "m_fSpeed");
	DT_TEBubbles.m_vecMins = GetOffset("DT_TEBubbles", "m_vecMins");
	DT_TEBubbles.m_vecMaxs = GetOffset("DT_TEBubbles", "m_vecMaxs");
	DT_TEBubbles.m_nModelIndex = GetOffset("DT_TEBubbles", "m_nModelIndex");
	DT_TEBubbles.m_fHeight = GetOffset("DT_TEBubbles", "m_fHeight");
	DT_TEBubbles.m_nCount = GetOffset("DT_TEBubbles", "m_nCount");
	DT_TEBubbles.m_fSpeed = GetOffset("DT_TEBubbles", "m_fSpeed");
	DT_TEBSPDecal.m_vecOrigin = GetOffset("DT_TEBSPDecal", "m_vecOrigin");
	DT_TEBSPDecal.m_nEntity = GetOffset("DT_TEBSPDecal", "m_nEntity");
	DT_TEBSPDecal.m_nIndex = GetOffset("DT_TEBSPDecal", "m_nIndex");
	DT_TEBreakModel.m_vecOrigin = GetOffset("DT_TEBreakModel", "m_vecOrigin");
	DT_TEBreakModel.m_angRotation = GetOffset("DT_TEBreakModel", "m_angRotation[0]");
	DT_TEBreakModel.m_vecSize = GetOffset("DT_TEBreakModel", "m_vecSize");
	DT_TEBreakModel.m_vecVelocity = GetOffset("DT_TEBreakModel", "m_vecVelocity");
	DT_TEBreakModel.m_nModelIndex = GetOffset("DT_TEBreakModel", "m_nModelIndex");
	DT_TEBreakModel.m_nRandomization = GetOffset("DT_TEBreakModel", "m_nRandomization");
	DT_TEBreakModel.m_nCount = GetOffset("DT_TEBreakModel", "m_nCount");
	DT_TEBreakModel.m_fTime = GetOffset("DT_TEBreakModel", "m_fTime");
	DT_TEBreakModel.m_nFlags = GetOffset("DT_TEBreakModel", "m_nFlags");
	DT_TEBloodStream.m_vecDirection = GetOffset("DT_TEBloodStream", "m_vecDirection");
	DT_TEBloodStream.r = GetOffset("DT_TEBloodStream", "r");
	DT_TEBloodStream.g = GetOffset("DT_TEBloodStream", "g");
	DT_TEBloodStream.b = GetOffset("DT_TEBloodStream", "b");
	DT_TEBloodStream.a = GetOffset("DT_TEBloodStream", "a");
	DT_TEBloodStream.m_nAmount = GetOffset("DT_TEBloodStream", "m_nAmount");
	DT_TEBloodSprite.m_vecOrigin = GetOffset("DT_TEBloodSprite", "m_vecOrigin");
	DT_TEBloodSprite.m_vecDirection = GetOffset("DT_TEBloodSprite", "m_vecDirection");
	DT_TEBloodSprite.r = GetOffset("DT_TEBloodSprite", "r");
	DT_TEBloodSprite.g = GetOffset("DT_TEBloodSprite", "g");
	DT_TEBloodSprite.b = GetOffset("DT_TEBloodSprite", "b");
	DT_TEBloodSprite.a = GetOffset("DT_TEBloodSprite", "a");
	DT_TEBloodSprite.m_nSprayModel = GetOffset("DT_TEBloodSprite", "m_nSprayModel");
	DT_TEBloodSprite.m_nDropModel = GetOffset("DT_TEBloodSprite", "m_nDropModel");
	DT_TEBloodSprite.m_nSize = GetOffset("DT_TEBloodSprite", "m_nSize");
	DT_TEBeamSpline.m_nPoints = GetOffset("DT_TEBeamSpline", "m_nPoints");
	DT_TEBeamSpline.m_vecPoints = GetOffset("DT_TEBeamSpline", "m_vecPoints[0]");
	DT_TEBeamRingPoint.m_vecCenter = GetOffset("DT_TEBeamRingPoint", "m_vecCenter");
	DT_TEBeamRingPoint.m_flStartRadius = GetOffset("DT_TEBeamRingPoint", "m_flStartRadius");
	DT_TEBeamRingPoint.m_flEndRadius = GetOffset("DT_TEBeamRingPoint", "m_flEndRadius");
	DT_TEBeamRing.m_nStartEntity = GetOffset("DT_TEBeamRing", "m_nStartEntity");
	DT_TEBeamRing.m_nEndEntity = GetOffset("DT_TEBeamRing", "m_nEndEntity");
	DT_TEBeamPoints.m_vecStartPoint = GetOffset("DT_TEBeamPoints", "m_vecStartPoint");
	DT_TEBeamPoints.m_vecEndPoint = GetOffset("DT_TEBeamPoints", "m_vecEndPoint");
	DT_TEBeamLaser.m_nStartEntity = GetOffset("DT_TEBeamLaser", "m_nStartEntity");
	DT_TEBeamLaser.m_nEndEntity = GetOffset("DT_TEBeamLaser", "m_nEndEntity");
	DT_TEBeamFollow.m_iEntIndex = GetOffset("DT_TEBeamFollow", "m_iEntIndex");
	DT_TEBeamEnts.m_nStartEntity = GetOffset("DT_TEBeamEnts", "m_nStartEntity");
	DT_TEBeamEnts.m_nEndEntity = GetOffset("DT_TEBeamEnts", "m_nEndEntity");
	DT_TEBeamEntPoint.m_nStartEntity = GetOffset("DT_TEBeamEntPoint", "m_nStartEntity");
	DT_TEBeamEntPoint.m_nEndEntity = GetOffset("DT_TEBeamEntPoint", "m_nEndEntity");
	DT_TEBeamEntPoint.m_vecStartPoint = GetOffset("DT_TEBeamEntPoint", "m_vecStartPoint");
	DT_TEBeamEntPoint.m_vecEndPoint = GetOffset("DT_TEBeamEntPoint", "m_vecEndPoint");
	DT_BaseBeam.m_nModelIndex = GetOffset("DT_BaseBeam", "m_nModelIndex");
	DT_BaseBeam.m_nHaloIndex = GetOffset("DT_BaseBeam", "m_nHaloIndex");
	DT_BaseBeam.m_nStartFrame = GetOffset("DT_BaseBeam", "m_nStartFrame");
	DT_BaseBeam.m_nFrameRate = GetOffset("DT_BaseBeam", "m_nFrameRate");
	DT_BaseBeam.m_fLife = GetOffset("DT_BaseBeam", "m_fLife");
	DT_BaseBeam.m_fWidth = GetOffset("DT_BaseBeam", "m_fWidth");
	DT_BaseBeam.m_fEndWidth = GetOffset("DT_BaseBeam", "m_fEndWidth");
	DT_BaseBeam.m_nFadeLength = GetOffset("DT_BaseBeam", "m_nFadeLength");
	DT_BaseBeam.m_fAmplitude = GetOffset("DT_BaseBeam", "m_fAmplitude");
	DT_BaseBeam.m_nSpeed = GetOffset("DT_BaseBeam", "m_nSpeed");
	DT_BaseBeam.r = GetOffset("DT_BaseBeam", "r");
	DT_BaseBeam.g = GetOffset("DT_BaseBeam", "g");
	DT_BaseBeam.b = GetOffset("DT_BaseBeam", "b");
	DT_BaseBeam.a = GetOffset("DT_BaseBeam", "a");
	DT_BaseBeam.m_nFlags = GetOffset("DT_BaseBeam", "m_nFlags");
	DT_TEMetalSparks.m_vecPos = GetOffset("DT_TEMetalSparks", "m_vecPos");
	DT_TEMetalSparks.m_vecDir = GetOffset("DT_TEMetalSparks", "m_vecDir");
	DT_SteamJet.m_SpreadSpeed = GetOffset("DT_SteamJet", "m_SpreadSpeed");
	DT_SteamJet.m_Speed = GetOffset("DT_SteamJet", "m_Speed");
	DT_SteamJet.m_StartSize = GetOffset("DT_SteamJet", "m_StartSize");
	DT_SteamJet.m_EndSize = GetOffset("DT_SteamJet", "m_EndSize");
	DT_SteamJet.m_Rate = GetOffset("DT_SteamJet", "m_Rate");
	DT_SteamJet.m_JetLength = GetOffset("DT_SteamJet", "m_JetLength");
	DT_SteamJet.m_bEmit = GetOffset("DT_SteamJet", "m_bEmit");
	DT_SteamJet.m_bFaceLeft = GetOffset("DT_SteamJet", "m_bFaceLeft");
	DT_SteamJet.m_nType = GetOffset("DT_SteamJet", "m_nType");
	DT_SteamJet.m_spawnflags = GetOffset("DT_SteamJet", "m_spawnflags");
	DT_SteamJet.m_flRollSpeed = GetOffset("DT_SteamJet", "m_flRollSpeed");
	DT_SmokeStack.m_SpreadSpeed = GetOffset("DT_SmokeStack", "m_SpreadSpeed");
	DT_SmokeStack.m_Speed = GetOffset("DT_SmokeStack", "m_Speed");
	DT_SmokeStack.m_StartSize = GetOffset("DT_SmokeStack", "m_StartSize");
	DT_SmokeStack.m_EndSize = GetOffset("DT_SmokeStack", "m_EndSize");
	DT_SmokeStack.m_Rate = GetOffset("DT_SmokeStack", "m_Rate");
	DT_SmokeStack.m_JetLength = GetOffset("DT_SmokeStack", "m_JetLength");
	DT_SmokeStack.m_bEmit = GetOffset("DT_SmokeStack", "m_bEmit");
	DT_SmokeStack.m_flBaseSpread = GetOffset("DT_SmokeStack", "m_flBaseSpread");
	DT_SmokeStack.m_flTwist = GetOffset("DT_SmokeStack", "m_flTwist");
	DT_SmokeStack.m_flRollSpeed = GetOffset("DT_SmokeStack", "m_flRollSpeed");
	DT_SmokeStack.m_iMaterialModel = GetOffset("DT_SmokeStack", "m_iMaterialModel");
	DT_SmokeStack.m_AmbientLight_m_vPos = GetOffset("DT_SmokeStack", "m_AmbientLight.m_vPos");
	DT_SmokeStack.m_AmbientLight_m_vColor = GetOffset("DT_SmokeStack", "m_AmbientLight.m_vColor");
	DT_SmokeStack.m_AmbientLight_m_flIntensity = GetOffset("DT_SmokeStack", "m_AmbientLight.m_flIntensity");
	DT_SmokeStack.m_DirLight_m_vPos = GetOffset("DT_SmokeStack", "m_DirLight.m_vPos");
	DT_SmokeStack.m_DirLight_m_vColor = GetOffset("DT_SmokeStack", "m_DirLight.m_vColor");
	DT_SmokeStack.m_DirLight_m_flIntensity = GetOffset("DT_SmokeStack", "m_DirLight.m_flIntensity");
	DT_SmokeStack.m_vWind = GetOffset("DT_SmokeStack", "m_vWind");
	DT_DustTrail.m_SpawnRate = GetOffset("DT_DustTrail", "m_SpawnRate");
	DT_DustTrail.m_Color = GetOffset("DT_DustTrail", "m_Color");
	DT_DustTrail.m_ParticleLifetime = GetOffset("DT_DustTrail", "m_ParticleLifetime");
	DT_DustTrail.m_StopEmitTime = GetOffset("DT_DustTrail", "m_StopEmitTime");
	DT_DustTrail.m_MinSpeed = GetOffset("DT_DustTrail", "m_MinSpeed");
	DT_DustTrail.m_MaxSpeed = GetOffset("DT_DustTrail", "m_MaxSpeed");
	DT_DustTrail.m_MinDirectedSpeed = GetOffset("DT_DustTrail", "m_MinDirectedSpeed");
	DT_DustTrail.m_MaxDirectedSpeed = GetOffset("DT_DustTrail", "m_MaxDirectedSpeed");
	DT_DustTrail.m_StartSize = GetOffset("DT_DustTrail", "m_StartSize");
	DT_DustTrail.m_EndSize = GetOffset("DT_DustTrail", "m_EndSize");
	DT_DustTrail.m_SpawnRadius = GetOffset("DT_DustTrail", "m_SpawnRadius");
	DT_DustTrail.m_bEmit = GetOffset("DT_DustTrail", "m_bEmit");
	DT_DustTrail.m_Opacity = GetOffset("DT_DustTrail", "m_Opacity");
	DT_FireTrail.m_nAttachment = GetOffset("DT_FireTrail", "m_nAttachment");
	DT_FireTrail.m_flLifetime = GetOffset("DT_FireTrail", "m_flLifetime");
	DT_SporeTrail.m_flSpawnRate = GetOffset("DT_SporeTrail", "m_flSpawnRate");
	DT_SporeTrail.m_vecEndColor = GetOffset("DT_SporeTrail", "m_vecEndColor");
	DT_SporeTrail.m_flParticleLifetime = GetOffset("DT_SporeTrail", "m_flParticleLifetime");
	DT_SporeTrail.m_flStartSize = GetOffset("DT_SporeTrail", "m_flStartSize");
	DT_SporeTrail.m_flEndSize = GetOffset("DT_SporeTrail", "m_flEndSize");
	DT_SporeTrail.m_flSpawnRadius = GetOffset("DT_SporeTrail", "m_flSpawnRadius");
	DT_SporeTrail.m_bEmit = GetOffset("DT_SporeTrail", "m_bEmit");
	DT_SporeExplosion.m_flSpawnRate = GetOffset("DT_SporeExplosion", "m_flSpawnRate");
	DT_SporeExplosion.m_flParticleLifetime = GetOffset("DT_SporeExplosion", "m_flParticleLifetime");
	DT_SporeExplosion.m_flStartSize = GetOffset("DT_SporeExplosion", "m_flStartSize");
	DT_SporeExplosion.m_flEndSize = GetOffset("DT_SporeExplosion", "m_flEndSize");
	DT_SporeExplosion.m_flSpawnRadius = GetOffset("DT_SporeExplosion", "m_flSpawnRadius");
	DT_SporeExplosion.m_bEmit = GetOffset("DT_SporeExplosion", "m_bEmit");
	DT_SporeExplosion.m_bDontRemove = GetOffset("DT_SporeExplosion", "m_bDontRemove");
	DT_RocketTrail.m_SpawnRate = GetOffset("DT_RocketTrail", "m_SpawnRate");
	DT_RocketTrail.m_StartColor = GetOffset("DT_RocketTrail", "m_StartColor");
	DT_RocketTrail.m_EndColor = GetOffset("DT_RocketTrail", "m_EndColor");
	DT_RocketTrail.m_ParticleLifetime = GetOffset("DT_RocketTrail", "m_ParticleLifetime");
	DT_RocketTrail.m_StopEmitTime = GetOffset("DT_RocketTrail", "m_StopEmitTime");
	DT_RocketTrail.m_MinSpeed = GetOffset("DT_RocketTrail", "m_MinSpeed");
	DT_RocketTrail.m_MaxSpeed = GetOffset("DT_RocketTrail", "m_MaxSpeed");
	DT_RocketTrail.m_StartSize = GetOffset("DT_RocketTrail", "m_StartSize");
	DT_RocketTrail.m_EndSize = GetOffset("DT_RocketTrail", "m_EndSize");
	DT_RocketTrail.m_SpawnRadius = GetOffset("DT_RocketTrail", "m_SpawnRadius");
	DT_RocketTrail.m_bEmit = GetOffset("DT_RocketTrail", "m_bEmit");
	DT_RocketTrail.m_nAttachment = GetOffset("DT_RocketTrail", "m_nAttachment");
	DT_RocketTrail.m_Opacity = GetOffset("DT_RocketTrail", "m_Opacity");
	DT_RocketTrail.m_bDamaged = GetOffset("DT_RocketTrail", "m_bDamaged");
	DT_RocketTrail.m_flFlareScale = GetOffset("DT_RocketTrail", "m_flFlareScale");
	DT_SmokeTrail.m_SpawnRate = GetOffset("DT_SmokeTrail", "m_SpawnRate");
	DT_SmokeTrail.m_StartColor = GetOffset("DT_SmokeTrail", "m_StartColor");
	DT_SmokeTrail.m_EndColor = GetOffset("DT_SmokeTrail", "m_EndColor");
	DT_SmokeTrail.m_ParticleLifetime = GetOffset("DT_SmokeTrail", "m_ParticleLifetime");
	DT_SmokeTrail.m_StopEmitTime = GetOffset("DT_SmokeTrail", "m_StopEmitTime");
	DT_SmokeTrail.m_MinSpeed = GetOffset("DT_SmokeTrail", "m_MinSpeed");
	DT_SmokeTrail.m_MaxSpeed = GetOffset("DT_SmokeTrail", "m_MaxSpeed");
	DT_SmokeTrail.m_MinDirectedSpeed = GetOffset("DT_SmokeTrail", "m_MinDirectedSpeed");
	DT_SmokeTrail.m_MaxDirectedSpeed = GetOffset("DT_SmokeTrail", "m_MaxDirectedSpeed");
	DT_SmokeTrail.m_StartSize = GetOffset("DT_SmokeTrail", "m_StartSize");
	DT_SmokeTrail.m_EndSize = GetOffset("DT_SmokeTrail", "m_EndSize");
	DT_SmokeTrail.m_SpawnRadius = GetOffset("DT_SmokeTrail", "m_SpawnRadius");
	DT_SmokeTrail.m_bEmit = GetOffset("DT_SmokeTrail", "m_bEmit");
	DT_SmokeTrail.m_nAttachment = GetOffset("DT_SmokeTrail", "m_nAttachment");
	DT_SmokeTrail.m_Opacity = GetOffset("DT_SmokeTrail", "m_Opacity");
	DT_PropVehicleDriveable.m_hPlayer = GetOffset("DT_PropVehicleDriveable", "m_hPlayer");
	DT_PropVehicleDriveable.m_nSpeed = GetOffset("DT_PropVehicleDriveable", "m_nSpeed");
	DT_PropVehicleDriveable.m_nRPM = GetOffset("DT_PropVehicleDriveable", "m_nRPM");
	DT_PropVehicleDriveable.m_flThrottle = GetOffset("DT_PropVehicleDriveable", "m_flThrottle");
	DT_PropVehicleDriveable.m_nBoostTimeLeft = GetOffset("DT_PropVehicleDriveable", "m_nBoostTimeLeft");
	DT_PropVehicleDriveable.m_nHasBoost = GetOffset("DT_PropVehicleDriveable", "m_nHasBoost");
	DT_PropVehicleDriveable.m_nScannerDisabledWeapons = GetOffset("DT_PropVehicleDriveable", "m_nScannerDisabledWeapons");
	DT_PropVehicleDriveable.m_nScannerDisabledVehicle = GetOffset("DT_PropVehicleDriveable", "m_nScannerDisabledVehicle");
	DT_PropVehicleDriveable.m_bEnterAnimOn = GetOffset("DT_PropVehicleDriveable", "m_bEnterAnimOn");
	DT_PropVehicleDriveable.m_bExitAnimOn = GetOffset("DT_PropVehicleDriveable", "m_bExitAnimOn");
	DT_PropVehicleDriveable.m_bUnableToFire = GetOffset("DT_PropVehicleDriveable", "m_bUnableToFire");
	DT_PropVehicleDriveable.m_vecEyeExitEndpoint = GetOffset("DT_PropVehicleDriveable", "m_vecEyeExitEndpoint");
	DT_PropVehicleDriveable.m_bHasGun = GetOffset("DT_PropVehicleDriveable", "m_bHasGun");
	DT_PropVehicleDriveable.m_vecGunCrosshair = GetOffset("DT_PropVehicleDriveable", "m_vecGunCrosshair");
	DT_ParticleSmokeGrenade.m_flSpawnTime = GetOffset("DT_ParticleSmokeGrenade", "m_flSpawnTime");
	DT_ParticleSmokeGrenade.m_FadeStartTime = GetOffset("DT_ParticleSmokeGrenade", "m_FadeStartTime");
	DT_ParticleSmokeGrenade.m_FadeEndTime = GetOffset("DT_ParticleSmokeGrenade", "m_FadeEndTime");
	DT_ParticleSmokeGrenade.m_MinColor = GetOffset("DT_ParticleSmokeGrenade", "m_MinColor");
	DT_ParticleSmokeGrenade.m_MaxColor = GetOffset("DT_ParticleSmokeGrenade", "m_MaxColor");
	DT_ParticleSmokeGrenade.m_CurrentStage = GetOffset("DT_ParticleSmokeGrenade", "m_CurrentStage");
	DT_ParticleFire.m_vOrigin = GetOffset("DT_ParticleFire", "m_vOrigin");
	DT_ParticleFire.m_vDirection = GetOffset("DT_ParticleFire", "m_vDirection");
	DT_TEGaussExplosion.m_nType = GetOffset("DT_TEGaussExplosion", "m_nType");
	DT_TEGaussExplosion.m_vecDirection = GetOffset("DT_TEGaussExplosion", "m_vecDirection");
	DT_QuadraticBeam.m_targetPosition = GetOffset("DT_QuadraticBeam", "m_targetPosition");
	DT_QuadraticBeam.m_controlPosition = GetOffset("DT_QuadraticBeam", "m_controlPosition");
	DT_QuadraticBeam.m_scrollRate = GetOffset("DT_QuadraticBeam", "m_scrollRate");
	DT_QuadraticBeam.m_flWidth = GetOffset("DT_QuadraticBeam", "m_flWidth");
	DT_Embers.m_nDensity = GetOffset("DT_Embers", "m_nDensity");
	DT_Embers.m_nLifetime = GetOffset("DT_Embers", "m_nLifetime");
	DT_Embers.m_nSpeed = GetOffset("DT_Embers", "m_nSpeed");
	DT_Embers.m_bEmit = GetOffset("DT_Embers", "m_bEmit");
	DT_EnvWind.m_EnvWindShared = GetOffset("DT_EnvWind", "m_EnvWindShared");
	DT_Precipitation.m_nPrecipType = GetOffset("DT_Precipitation", "m_nPrecipType");
	DT_BaseAttributableItem.m_AttributeManager = GetOffset("DT_BaseAttributableItem", "m_AttributeManager");
	DT_BaseAttributableItem.m_OriginalOwnerXuidLow = GetOffset("DT_BaseAttributableItem", "m_OriginalOwnerXuidLow");
	DT_BaseAttributableItem.m_OriginalOwnerXuidHigh = GetOffset("DT_BaseAttributableItem", "m_OriginalOwnerXuidHigh");
	DT_BaseAttributableItem.m_nFallbackPaintKit = GetOffset("DT_BaseAttributableItem", "m_nFallbackPaintKit");
	DT_BaseAttributableItem.m_nFallbackSeed = GetOffset("DT_BaseAttributableItem", "m_nFallbackSeed");
	DT_BaseAttributableItem.m_flFallbackWear = GetOffset("DT_BaseAttributableItem", "m_flFallbackWear");
	DT_BaseAttributableItem.m_nFallbackStatTrak = GetOffset("DT_BaseAttributableItem", "m_nFallbackStatTrak");
	DT_EconEntity.m_AttributeManager = GetOffset("DT_EconEntity", "m_AttributeManager");
	DT_EconEntity.m_OriginalOwnerXuidLow = GetOffset("DT_EconEntity", "m_OriginalOwnerXuidLow");
	DT_EconEntity.m_OriginalOwnerXuidHigh = GetOffset("DT_EconEntity", "m_OriginalOwnerXuidHigh");
	DT_EconEntity.m_nFallbackPaintKit = GetOffset("DT_EconEntity", "m_nFallbackPaintKit");
	DT_EconEntity.m_nFallbackSeed = GetOffset("DT_EconEntity", "m_nFallbackSeed");
	DT_EconEntity.m_flFallbackWear = GetOffset("DT_EconEntity", "m_flFallbackWear");
	DT_EconEntity.m_nFallbackStatTrak = GetOffset("DT_EconEntity", "m_nFallbackStatTrak");
	DT_WeaponXM1014.m_reloadState = GetOffset("DT_WeaponXM1014", "m_reloadState");
	DT_WeaponTaser.m_fFireTime = GetOffset("DT_WeaponTaser", "m_fFireTime");
	DT_WeaponTablet.m_flUpgradeExpirationTime = GetOffset("DT_WeaponTablet", "m_flUpgradeExpirationTime[0]");
	DT_WeaponTablet.m_vecLocalHexFlags = GetOffset("DT_WeaponTablet", "m_vecLocalHexFlags[0]");
	DT_WeaponTablet.m_nContractKillGridIndex = GetOffset("DT_WeaponTablet", "m_nContractKillGridIndex");
	DT_WeaponTablet.m_nContractKillGridHighResIndex = GetOffset("DT_WeaponTablet", "m_nContractKillGridHighResIndex");
	DT_WeaponTablet.m_bTabletReceptionIsBlocked = GetOffset("DT_WeaponTablet", "m_bTabletReceptionIsBlocked");
	DT_WeaponTablet.m_flScanProgress = GetOffset("DT_WeaponTablet", "m_flScanProgress");
	DT_WeaponTablet.m_flBootTime = GetOffset("DT_WeaponTablet", "m_flBootTime");
	DT_WeaponTablet.m_flShowMapTime = GetOffset("DT_WeaponTablet", "m_flShowMapTime");
	DT_WeaponTablet.m_vecNotificationIds = GetOffset("DT_WeaponTablet", "m_vecNotificationIds[0]");
	DT_WeaponTablet.m_vecNotificationTimestamps = GetOffset("DT_WeaponTablet", "m_vecNotificationTimestamps[0]");
	DT_WeaponTablet.m_vecPlayerPositionHistory = GetOffset("DT_WeaponTablet", "m_vecPlayerPositionHistory[0]");
	DT_WeaponTablet.m_nLastPurchaseIndex = GetOffset("DT_WeaponTablet", "m_nLastPurchaseIndex");
	DT_WeaponSawedoff.m_reloadState = GetOffset("DT_WeaponSawedoff", "m_reloadState");
	DT_WeaponNOVA.m_reloadState = GetOffset("DT_WeaponNOVA", "m_reloadState");
	DT_WeaponMelee.m_flThrowAt = GetOffset("DT_WeaponMelee", "m_flThrowAt");
	DT_WeaponM3.m_reloadState = GetOffset("DT_WeaponM3", "m_reloadState");
	DT_WeaponFists.m_bPlayingUninterruptableAct = GetOffset("DT_WeaponFists", "m_bPlayingUninterruptableAct");
	DT_WeaponCSBaseGun.m_zoomLevel = GetOffset("DT_WeaponCSBaseGun", "m_zoomLevel");
	DT_WeaponCSBaseGun.m_iBurstShotsRemaining = GetOffset("DT_WeaponCSBaseGun", "m_iBurstShotsRemaining");
	DT_WeaponCSBase.m_weaponMode = GetOffset("DT_WeaponCSBase", "m_weaponMode");
	DT_WeaponCSBase.m_fAccuracyPenalty = GetOffset("DT_WeaponCSBase", "m_fAccuracyPenalty");
	DT_WeaponCSBase.m_fLastShotTime = GetOffset("DT_WeaponCSBase", "m_fLastShotTime");
	DT_WeaponCSBase.m_iRecoilIndex = GetOffset("DT_WeaponCSBase", "m_iRecoilIndex");
	DT_WeaponCSBase.m_flRecoilIndex = GetOffset("DT_WeaponCSBase", "m_flRecoilIndex");
	DT_WeaponCSBase.m_hPrevOwner = GetOffset("DT_WeaponCSBase", "m_hPrevOwner");
	DT_WeaponCSBase.m_bBurstMode = GetOffset("DT_WeaponCSBase", "m_bBurstMode");
	DT_WeaponCSBase.m_flPostponeFireReadyTime = GetOffset("DT_WeaponCSBase", "m_flPostponeFireReadyTime");
	DT_WeaponCSBase.m_bReloadVisuallyComplete = GetOffset("DT_WeaponCSBase", "m_bReloadVisuallyComplete");
	DT_WeaponCSBase.m_bSilencerOn = GetOffset("DT_WeaponCSBase", "m_bSilencerOn");
	DT_WeaponCSBase.m_flDoneSwitchingSilencer = GetOffset("DT_WeaponCSBase", "m_flDoneSwitchingSilencer");
	DT_WeaponCSBase.m_iOriginalTeamNumber = GetOffset("DT_WeaponCSBase", "m_iOriginalTeamNumber");
	DT_WeaponCSBase.m_iIronSightMode = GetOffset("DT_WeaponCSBase", "m_iIronSightMode");
	DT_WeaponC4.m_bStartedArming = GetOffset("DT_WeaponC4", "m_bStartedArming");
	DT_WeaponC4.m_bBombPlacedAnimation = GetOffset("DT_WeaponC4", "m_bBombPlacedAnimation");
	DT_WeaponC4.m_fArmedTime = GetOffset("DT_WeaponC4", "m_fArmedTime");
	DT_WeaponC4.m_bShowC4LED = GetOffset("DT_WeaponC4", "m_bShowC4LED");
	DT_WeaponC4.m_bIsPlantingViaUse = GetOffset("DT_WeaponC4", "m_bIsPlantingViaUse");
	DT_BreachChargeProjectile.m_bShouldExplode = GetOffset("DT_BreachChargeProjectile", "m_bShouldExplode");
	DT_BreachChargeProjectile.m_weaponThatThrewMe = GetOffset("DT_BreachChargeProjectile", "m_weaponThatThrewMe");
	DT_BreachChargeProjectile.m_nParentBoneIndex = GetOffset("DT_BreachChargeProjectile", "m_nParentBoneIndex");
	DT_BreachChargeProjectile.m_vecParentBonePos = GetOffset("DT_BreachChargeProjectile", "m_vecParentBonePos");
	DT_WeaponBaseItem.m_bRedraw = GetOffset("DT_WeaponBaseItem", "m_bRedraw");
	DT_BaseCSGrenade.m_bRedraw = GetOffset("DT_BaseCSGrenade", "m_bRedraw");
	DT_BaseCSGrenade.m_bIsHeldByPlayer = GetOffset("DT_BaseCSGrenade", "m_bIsHeldByPlayer");
	DT_BaseCSGrenade.m_bPinPulled = GetOffset("DT_BaseCSGrenade", "m_bPinPulled");
	DT_BaseCSGrenade.m_fThrowTime = GetOffset("DT_BaseCSGrenade", "m_fThrowTime");
	DT_BaseCSGrenade.m_bLoopingSoundPlaying = GetOffset("DT_BaseCSGrenade", "m_bLoopingSoundPlaying");
	DT_BaseCSGrenade.m_flThrowStrength = GetOffset("DT_BaseCSGrenade", "m_flThrowStrength");
	DT_SmokeGrenadeProjectile.m_bDidSmokeEffect = GetOffset("DT_SmokeGrenadeProjectile", "m_bDidSmokeEffect");
	DT_SmokeGrenadeProjectile.m_nSmokeEffectTickBegin = GetOffset("DT_SmokeGrenadeProjectile", "m_nSmokeEffectTickBegin");
	DT_MolotovProjectile.m_bIsIncGrenade = GetOffset("DT_MolotovProjectile", "m_bIsIncGrenade");
	DT_ItemDogtags.m_OwningPlayer = GetOffset("DT_ItemDogtags", "m_OwningPlayer");
	DT_ItemDogtags.m_KillingPlayer = GetOffset("DT_ItemDogtags", "m_KillingPlayer");
	DT_PhysPropLootCrate.m_bRenderInPSPM = GetOffset("DT_PhysPropLootCrate", "m_bRenderInPSPM");
	DT_PhysPropLootCrate.m_bRenderInTablet = GetOffset("DT_PhysPropLootCrate", "m_bRenderInTablet");
	DT_PhysPropLootCrate.m_iHealth = GetOffset("DT_PhysPropLootCrate", "m_iHealth");
	DT_PhysPropLootCrate.m_iMaxHealth = GetOffset("DT_PhysPropLootCrate", "m_iMaxHealth");
	DT_EnvGasCanister.m_flFlightSpeed = GetOffset("DT_EnvGasCanister", "m_flFlightSpeed");
	DT_EnvGasCanister.m_flLaunchTime = GetOffset("DT_EnvGasCanister", "m_flLaunchTime");
	DT_EnvGasCanister.m_vecParabolaDirection = GetOffset("DT_EnvGasCanister", "m_vecParabolaDirection");
	DT_EnvGasCanister.m_flFlightTime = GetOffset("DT_EnvGasCanister", "m_flFlightTime");
	DT_EnvGasCanister.m_flWorldEnterTime = GetOffset("DT_EnvGasCanister", "m_flWorldEnterTime");
	DT_EnvGasCanister.m_flInitialZSpeed = GetOffset("DT_EnvGasCanister", "m_flInitialZSpeed");
	DT_EnvGasCanister.m_flZAcceleration = GetOffset("DT_EnvGasCanister", "m_flZAcceleration");
	DT_EnvGasCanister.m_flHorizSpeed = GetOffset("DT_EnvGasCanister", "m_flHorizSpeed");
	DT_EnvGasCanister.m_bLaunchedFromWithinWorld = GetOffset("DT_EnvGasCanister", "m_bLaunchedFromWithinWorld");
	DT_EnvGasCanister.m_vecImpactPosition = GetOffset("DT_EnvGasCanister", "m_vecImpactPosition");
	DT_EnvGasCanister.m_vecStartPosition = GetOffset("DT_EnvGasCanister", "m_vecStartPosition");
	DT_EnvGasCanister.m_vecEnterWorldPosition = GetOffset("DT_EnvGasCanister", "m_vecEnterWorldPosition");
	DT_EnvGasCanister.m_vecDirection = GetOffset("DT_EnvGasCanister", "m_vecDirection");
	DT_EnvGasCanister.m_vecStartAngles = GetOffset("DT_EnvGasCanister", "m_vecStartAngles");
	DT_EnvGasCanister.m_vecSkyboxOrigin = GetOffset("DT_EnvGasCanister", "m_vecSkyboxOrigin");
	DT_EnvGasCanister.m_flSkyboxScale = GetOffset("DT_EnvGasCanister", "m_flSkyboxScale");
	DT_EnvGasCanister.m_bInSkybox = GetOffset("DT_EnvGasCanister", "m_bInSkybox");
	DT_EnvGasCanister.m_bDoImpactEffects = GetOffset("DT_EnvGasCanister", "m_bDoImpactEffects");
	DT_EnvGasCanister.m_bLanded = GetOffset("DT_EnvGasCanister", "m_bLanded");
	DT_EnvGasCanister.m_hSkyboxCopy = GetOffset("DT_EnvGasCanister", "m_hSkyboxCopy");
	DT_EnvGasCanister.m_nMyZoneIndex = GetOffset("DT_EnvGasCanister", "m_nMyZoneIndex");
	DT_EnvGasCanister.m_vecOrigin = GetOffset("DT_EnvGasCanister", "m_vecOrigin");
	DT_Dronegun.m_vecAttentionTarget = GetOffset("DT_Dronegun", "m_vecAttentionTarget");
	DT_Dronegun.m_vecTargetOffset = GetOffset("DT_Dronegun", "m_vecTargetOffset");
	DT_Dronegun.m_iHealth = GetOffset("DT_Dronegun", "m_iHealth");
	DT_Dronegun.m_bHasTarget = GetOffset("DT_Dronegun", "m_bHasTarget");
	DT_ParadropChopper.m_vecOrigin = GetOffset("DT_ParadropChopper", "m_vecOrigin");
	DT_ParadropChopper.m_hCallingPlayer = GetOffset("DT_ParadropChopper", "m_hCallingPlayer");
	DT_SurvivalSpawnChopper.m_vecOrigin = GetOffset("DT_SurvivalSpawnChopper", "m_vecOrigin");
	DT_BRC4Target.m_bBrokenOpen = GetOffset("DT_BRC4Target", "m_bBrokenOpen");
	DT_BRC4Target.m_flRadius = GetOffset("DT_BRC4Target", "m_flRadius");
	DT_InfoMapRegion.m_flRadius = GetOffset("DT_InfoMapRegion", "m_flRadius");
	DT_InfoMapRegion.m_szLocToken = GetOffset("DT_InfoMapRegion", "m_szLocToken");
	DT_Inferno.m_fireXDelta = GetOffset("DT_Inferno", "m_fireXDelta");
	DT_Inferno.m_fireYDelta = GetOffset("DT_Inferno", "m_fireYDelta");
	DT_Inferno.m_fireZDelta = GetOffset("DT_Inferno", "m_fireZDelta");
	DT_Inferno.m_bFireIsBurning = GetOffset("DT_Inferno", "m_bFireIsBurning");
	DT_Inferno.m_fireCount = GetOffset("DT_Inferno", "m_fireCount");
	DT_CChicken.m_jumpedThisFrame = GetOffset("DT_CChicken", "m_jumpedThisFrame");
	DT_CChicken.m_leader = GetOffset("DT_CChicken", "m_leader");
	DT_Drone.m_hMoveToThisEntity = GetOffset("DT_Drone", "m_hMoveToThisEntity");
	DT_Drone.m_hDeliveryCargo = GetOffset("DT_Drone", "m_hDeliveryCargo");
	DT_FootstepControl.m_source = GetOffset("DT_FootstepControl", "m_source");
	DT_FootstepControl.m_destination = GetOffset("DT_FootstepControl", "m_destination");
	DT_CSGameRulesProxy.cs_gamerules_data = GetOffset("DT_CSGameRulesProxy", "cs_gamerules_data");
	DT_TEPlantBomb.m_vecOrigin = GetOffset("DT_TEPlantBomb", "m_vecOrigin");
	DT_TEPlantBomb.m_iPlayer = GetOffset("DT_TEPlantBomb", "m_iPlayer");
	DT_TEPlantBomb.m_option = GetOffset("DT_TEPlantBomb", "m_option");
	DT_TEFireBullets.m_vecOrigin = GetOffset("DT_TEFireBullets", "m_vecOrigin");
	DT_TEFireBullets.m_vecAngles = GetOffset("DT_TEFireBullets", "m_vecAngles[0]");
	DT_TEFireBullets.m_iWeaponID = GetOffset("DT_TEFireBullets", "m_iWeaponID");
	DT_TEFireBullets.m_weapon = GetOffset("DT_TEFireBullets", "m_weapon");
	DT_TEFireBullets.m_iMode = GetOffset("DT_TEFireBullets", "m_iMode");
	DT_TEFireBullets.m_iSeed = GetOffset("DT_TEFireBullets", "m_iSeed");
	DT_TEFireBullets.m_iPlayer = GetOffset("DT_TEFireBullets", "m_iPlayer");
	DT_TEFireBullets.m_fInaccuracy = GetOffset("DT_TEFireBullets", "m_fInaccuracy");
	DT_TEFireBullets.m_fSpread = GetOffset("DT_TEFireBullets", "m_fSpread");
	DT_TEFireBullets.m_nItemDefIndex = GetOffset("DT_TEFireBullets", "m_nItemDefIndex");
	DT_TEFireBullets.m_iSoundType = GetOffset("DT_TEFireBullets", "m_iSoundType");
	DT_TEFireBullets.m_flRecoilIndex = GetOffset("DT_TEFireBullets", "m_flRecoilIndex");
	DT_TERadioIcon.m_iAttachToClient = GetOffset("DT_TERadioIcon", "m_iAttachToClient");
	DT_PlantedC4.m_bBombTicking = GetOffset("DT_PlantedC4", "m_bBombTicking");
	DT_PlantedC4.m_nBombSite = GetOffset("DT_PlantedC4", "m_nBombSite");
	DT_PlantedC4.m_flC4Blow = GetOffset("DT_PlantedC4", "m_flC4Blow");
	DT_PlantedC4.m_flTimerLength = GetOffset("DT_PlantedC4", "m_flTimerLength");
	DT_PlantedC4.m_flDefuseLength = GetOffset("DT_PlantedC4", "m_flDefuseLength");
	DT_PlantedC4.m_flDefuseCountDown = GetOffset("DT_PlantedC4", "m_flDefuseCountDown");
	DT_PlantedC4.m_bBombDefused = GetOffset("DT_PlantedC4", "m_bBombDefused");
	DT_PlantedC4.m_hBombDefuser = GetOffset("DT_PlantedC4", "m_hBombDefuser");
	DT_CSPlayerResource.m_iPlayerC4 = GetOffset("DT_CSPlayerResource", "m_iPlayerC4");
	DT_CSPlayerResource.m_iPlayerVIP = GetOffset("DT_CSPlayerResource", "m_iPlayerVIP");
	DT_CSPlayerResource.m_bHostageAlive = GetOffset("DT_CSPlayerResource", "m_bHostageAlive");
	DT_CSPlayerResource.m_isHostageFollowingSomeone = GetOffset("DT_CSPlayerResource", "m_isHostageFollowingSomeone");
	DT_CSPlayerResource.m_iHostageEntityIDs = GetOffset("DT_CSPlayerResource", "m_iHostageEntityIDs");
	DT_CSPlayerResource.m_bombsiteCenterA = GetOffset("DT_CSPlayerResource", "m_bombsiteCenterA");
	DT_CSPlayerResource.m_bombsiteCenterB = GetOffset("DT_CSPlayerResource", "m_bombsiteCenterB");
	DT_CSPlayerResource.m_hostageRescueX = GetOffset("DT_CSPlayerResource", "m_hostageRescueX");
	DT_CSPlayerResource.m_hostageRescueY = GetOffset("DT_CSPlayerResource", "m_hostageRescueY");
	DT_CSPlayerResource.m_hostageRescueZ = GetOffset("DT_CSPlayerResource", "m_hostageRescueZ");
	DT_CSPlayerResource.m_iMVPs = GetOffset("DT_CSPlayerResource", "m_iMVPs");
	DT_CSPlayerResource.m_iArmor = GetOffset("DT_CSPlayerResource", "m_iArmor");
	DT_CSPlayerResource.m_bHasHelmet = GetOffset("DT_CSPlayerResource", "m_bHasHelmet");
	DT_CSPlayerResource.m_bHasDefuser = GetOffset("DT_CSPlayerResource", "m_bHasDefuser");
	DT_CSPlayerResource.m_iScore = GetOffset("DT_CSPlayerResource", "m_iScore");
	DT_CSPlayerResource.m_iCompetitiveRanking = GetOffset("DT_CSPlayerResource", "m_iCompetitiveRanking");
	DT_CSPlayerResource.m_iCompetitiveWins = GetOffset("DT_CSPlayerResource", "m_iCompetitiveWins");
	DT_CSPlayerResource.m_iCompetitiveRankType = GetOffset("DT_CSPlayerResource", "m_iCompetitiveRankType");
	DT_CSPlayerResource.m_iCompTeammateColor = GetOffset("DT_CSPlayerResource", "m_iCompTeammateColor");
	DT_CSPlayerResource.m_iLifetimeStart = GetOffset("DT_CSPlayerResource", "m_iLifetimeStart");
	DT_CSPlayerResource.m_iLifetimeEnd = GetOffset("DT_CSPlayerResource", "m_iLifetimeEnd");
	DT_CSPlayerResource.m_bControllingBot = GetOffset("DT_CSPlayerResource", "m_bControllingBot");
	DT_CSPlayerResource.m_iControlledPlayer = GetOffset("DT_CSPlayerResource", "m_iControlledPlayer");
	DT_CSPlayerResource.m_iControlledByPlayer = GetOffset("DT_CSPlayerResource", "m_iControlledByPlayer");
	DT_CSPlayerResource.m_iBotDifficulty = GetOffset("DT_CSPlayerResource", "m_iBotDifficulty");
	DT_CSPlayerResource.m_szClan = GetOffset("DT_CSPlayerResource", "m_szClan");
	DT_CSPlayerResource.m_iTotalCashSpent = GetOffset("DT_CSPlayerResource", "m_iTotalCashSpent");
	DT_CSPlayerResource.m_iGunGameLevel = GetOffset("DT_CSPlayerResource", "m_iGunGameLevel");
	DT_CSPlayerResource.m_iCashSpentThisRound = GetOffset("DT_CSPlayerResource", "m_iCashSpentThisRound");
	DT_CSPlayerResource.m_nEndMatchNextMapVotes = GetOffset("DT_CSPlayerResource", "m_nEndMatchNextMapVotes");
	DT_CSPlayerResource.m_bEndMatchNextMapAllVoted = GetOffset("DT_CSPlayerResource", "m_bEndMatchNextMapAllVoted");
	DT_CSPlayerResource.m_nActiveCoinRank = GetOffset("DT_CSPlayerResource", "m_nActiveCoinRank");
	DT_CSPlayerResource.m_nMusicID = GetOffset("DT_CSPlayerResource", "m_nMusicID");
	DT_CSPlayerResource.m_nPersonaDataPublicLevel = GetOffset("DT_CSPlayerResource", "m_nPersonaDataPublicLevel");
	DT_CSPlayerResource.m_nPersonaDataPublicCommendsLeader = GetOffset("DT_CSPlayerResource", "m_nPersonaDataPublicCommendsLeader");
	DT_CSPlayerResource.m_nPersonaDataPublicCommendsTeacher = GetOffset("DT_CSPlayerResource", "m_nPersonaDataPublicCommendsTeacher");
	DT_CSPlayerResource.m_nPersonaDataPublicCommendsFriendly = GetOffset("DT_CSPlayerResource", "m_nPersonaDataPublicCommendsFriendly");
	DT_CSPlayerResource.m_iMatchStats_Kills_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_Kills_Total");
	DT_CSPlayerResource.m_iMatchStats_5k_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_5k_Total");
	DT_CSPlayerResource.m_iMatchStats_4k_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_4k_Total");
	DT_CSPlayerResource.m_iMatchStats_3k_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_3k_Total");
	DT_CSPlayerResource.m_iMatchStats_Damage_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_Damage_Total");
	DT_CSPlayerResource.m_iMatchStats_EquipmentValue_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_EquipmentValue_Total");
	DT_CSPlayerResource.m_iMatchStats_KillReward_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_KillReward_Total");
	DT_CSPlayerResource.m_iMatchStats_LiveTime_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_LiveTime_Total");
	DT_CSPlayerResource.m_iMatchStats_Deaths_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_Deaths_Total");
	DT_CSPlayerResource.m_iMatchStats_Assists_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_Assists_Total");
	DT_CSPlayerResource.m_iMatchStats_HeadShotKills_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_HeadShotKills_Total");
	DT_CSPlayerResource.m_iMatchStats_Objective_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_Objective_Total");
	DT_CSPlayerResource.m_iMatchStats_CashEarned_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_CashEarned_Total");
	DT_CSPlayerResource.m_iMatchStats_UtilityDamage_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_UtilityDamage_Total");
	DT_CSPlayerResource.m_iMatchStats_EnemiesFlashed_Total = GetOffset("DT_CSPlayerResource", "m_iMatchStats_EnemiesFlashed_Total");
	DT_CSPlayer.cslocaldata = GetOffset("DT_CSPlayer", "cslocaldata");
	DT_CSPlayer.csnonlocaldata = GetOffset("DT_CSPlayer", "csnonlocaldata");
	DT_CSPlayer.csteamdata = GetOffset("DT_CSPlayer", "csteamdata");
	DT_CSPlayer.m_angEyeAngles = GetOffset("DT_CSPlayer", "m_angEyeAngles[0]");
	DT_CSPlayer.m_iAddonBits = GetOffset("DT_CSPlayer", "m_iAddonBits");
	DT_CSPlayer.m_iPrimaryAddon = GetOffset("DT_CSPlayer", "m_iPrimaryAddon");
	DT_CSPlayer.m_iSecondaryAddon = GetOffset("DT_CSPlayer", "m_iSecondaryAddon");
	DT_CSPlayer.m_iThrowGrenadeCounter = GetOffset("DT_CSPlayer", "m_iThrowGrenadeCounter");
	DT_CSPlayer.m_bWaitForNoAttack = GetOffset("DT_CSPlayer", "m_bWaitForNoAttack");
	DT_CSPlayer.m_bIsRespawningForDMBonus = GetOffset("DT_CSPlayer", "m_bIsRespawningForDMBonus");
	DT_CSPlayer.m_iPlayerState = GetOffset("DT_CSPlayer", "m_iPlayerState");
	DT_CSPlayer.m_iAccount = GetOffset("DT_CSPlayer", "m_iAccount");
	DT_CSPlayer.m_iStartAccount = GetOffset("DT_CSPlayer", "m_iStartAccount");
	DT_CSPlayer.m_totalHitsOnServer = GetOffset("DT_CSPlayer", "m_totalHitsOnServer");
	DT_CSPlayer.m_bInBombZone = GetOffset("DT_CSPlayer", "m_bInBombZone");
	DT_CSPlayer.m_bInBuyZone = GetOffset("DT_CSPlayer", "m_bInBuyZone");
	DT_CSPlayer.m_bInNoDefuseArea = GetOffset("DT_CSPlayer", "m_bInNoDefuseArea");
	DT_CSPlayer.m_bKilledByTaser = GetOffset("DT_CSPlayer", "m_bKilledByTaser");
	DT_CSPlayer.m_iMoveState = GetOffset("DT_CSPlayer", "m_iMoveState");
	DT_CSPlayer.m_iClass = GetOffset("DT_CSPlayer", "m_iClass");
	DT_CSPlayer.m_ArmorValue = GetOffset("DT_CSPlayer", "m_ArmorValue");
	DT_CSPlayer.m_bHasDefuser = GetOffset("DT_CSPlayer", "m_bHasDefuser");
	DT_CSPlayer.m_bNightVisionOn = GetOffset("DT_CSPlayer", "m_bNightVisionOn");
	DT_CSPlayer.m_bHasNightVision = GetOffset("DT_CSPlayer", "m_bHasNightVision");
	DT_CSPlayer.m_bInHostageRescueZone = GetOffset("DT_CSPlayer", "m_bInHostageRescueZone");
	DT_CSPlayer.m_bIsDefusing = GetOffset("DT_CSPlayer", "m_bIsDefusing");
	DT_CSPlayer.m_bIsGrabbingHostage = GetOffset("DT_CSPlayer", "m_bIsGrabbingHostage");
	DT_CSPlayer.m_iBlockingUseActionInProgress = GetOffset("DT_CSPlayer", "m_iBlockingUseActionInProgress");
	DT_CSPlayer.m_bIsScoped = GetOffset("DT_CSPlayer", "m_bIsScoped");
	DT_CSPlayer.m_bIsWalking = GetOffset("DT_CSPlayer", "m_bIsWalking");
	DT_CSPlayer.m_nIsAutoMounting = GetOffset("DT_CSPlayer", "m_nIsAutoMounting");
	DT_CSPlayer.m_bResumeZoom = GetOffset("DT_CSPlayer", "m_bResumeZoom");
	DT_CSPlayer.m_fImmuneToGunGameDamageTime = GetOffset("DT_CSPlayer", "m_fImmuneToGunGameDamageTime");
	DT_CSPlayer.m_bGunGameImmunity = GetOffset("DT_CSPlayer", "m_bGunGameImmunity");
	DT_CSPlayer.m_bHasMovedSinceSpawn = GetOffset("DT_CSPlayer", "m_bHasMovedSinceSpawn");
	DT_CSPlayer.m_bMadeFinalGunGameProgressiveKill = GetOffset("DT_CSPlayer", "m_bMadeFinalGunGameProgressiveKill");
	DT_CSPlayer.m_iGunGameProgressiveWeaponIndex = GetOffset("DT_CSPlayer", "m_iGunGameProgressiveWeaponIndex");
	DT_CSPlayer.m_iNumGunGameTRKillPoints = GetOffset("DT_CSPlayer", "m_iNumGunGameTRKillPoints");
	DT_CSPlayer.m_iNumGunGameKillsWithCurrentWeapon = GetOffset("DT_CSPlayer", "m_iNumGunGameKillsWithCurrentWeapon");
	DT_CSPlayer.m_iNumRoundKills = GetOffset("DT_CSPlayer", "m_iNumRoundKills");
	DT_CSPlayer.m_fMolotovUseTime = GetOffset("DT_CSPlayer", "m_fMolotovUseTime");
	DT_CSPlayer.m_fMolotovDamageTime = GetOffset("DT_CSPlayer", "m_fMolotovDamageTime");
	DT_CSPlayer.m_szArmsModel = GetOffset("DT_CSPlayer", "m_szArmsModel");
	DT_CSPlayer.m_hCarriedHostage = GetOffset("DT_CSPlayer", "m_hCarriedHostage");
	DT_CSPlayer.m_hCarriedHostageProp = GetOffset("DT_CSPlayer", "m_hCarriedHostageProp");
	DT_CSPlayer.m_bIsRescuing = GetOffset("DT_CSPlayer", "m_bIsRescuing");
	DT_CSPlayer.m_flGroundAccelLinearFracLastTime = GetOffset("DT_CSPlayer", "m_flGroundAccelLinearFracLastTime");
	DT_CSPlayer.m_bCanMoveDuringFreezePeriod = GetOffset("DT_CSPlayer", "m_bCanMoveDuringFreezePeriod");
	DT_CSPlayer.m_isCurrentGunGameLeader = GetOffset("DT_CSPlayer", "m_isCurrentGunGameLeader");
	DT_CSPlayer.m_isCurrentGunGameTeamLeader = GetOffset("DT_CSPlayer", "m_isCurrentGunGameTeamLeader");
	DT_CSPlayer.m_flGuardianTooFarDistFrac = GetOffset("DT_CSPlayer", "m_flGuardianTooFarDistFrac");
	DT_CSPlayer.m_flDetectedByEnemySensorTime = GetOffset("DT_CSPlayer", "m_flDetectedByEnemySensorTime");
	DT_CSPlayer.m_bIsPlayerGhost = GetOffset("DT_CSPlayer", "m_bIsPlayerGhost");
	DT_CSPlayer.m_iMatchStats_Kills = GetOffset("DT_CSPlayer", "m_iMatchStats_Kills");
	DT_CSPlayer.m_iMatchStats_Damage = GetOffset("DT_CSPlayer", "m_iMatchStats_Damage");
	DT_CSPlayer.m_iMatchStats_EquipmentValue = GetOffset("DT_CSPlayer", "m_iMatchStats_EquipmentValue");
	DT_CSPlayer.m_iMatchStats_MoneySaved = GetOffset("DT_CSPlayer", "m_iMatchStats_MoneySaved");
	DT_CSPlayer.m_iMatchStats_KillReward = GetOffset("DT_CSPlayer", "m_iMatchStats_KillReward");
	DT_CSPlayer.m_iMatchStats_LiveTime = GetOffset("DT_CSPlayer", "m_iMatchStats_LiveTime");
	DT_CSPlayer.m_iMatchStats_Deaths = GetOffset("DT_CSPlayer", "m_iMatchStats_Deaths");
	DT_CSPlayer.m_iMatchStats_Assists = GetOffset("DT_CSPlayer", "m_iMatchStats_Assists");
	DT_CSPlayer.m_iMatchStats_HeadShotKills = GetOffset("DT_CSPlayer", "m_iMatchStats_HeadShotKills");
	DT_CSPlayer.m_iMatchStats_Objective = GetOffset("DT_CSPlayer", "m_iMatchStats_Objective");
	DT_CSPlayer.m_iMatchStats_CashEarned = GetOffset("DT_CSPlayer", "m_iMatchStats_CashEarned");
	DT_CSPlayer.m_iMatchStats_UtilityDamage = GetOffset("DT_CSPlayer", "m_iMatchStats_UtilityDamage");
	DT_CSPlayer.m_iMatchStats_EnemiesFlashed = GetOffset("DT_CSPlayer", "m_iMatchStats_EnemiesFlashed");
	DT_CSPlayer.m_rank = GetOffset("DT_CSPlayer", "m_rank");
	DT_CSPlayer.m_unMusicID = GetOffset("DT_CSPlayer", "m_unMusicID");
	DT_CSPlayer.m_bHasHelmet = GetOffset("DT_CSPlayer", "m_bHasHelmet");
	DT_CSPlayer.m_bHasHeavyArmor = GetOffset("DT_CSPlayer", "m_bHasHeavyArmor");
	DT_CSPlayer.m_nHeavyAssaultSuitCooldownRemaining = GetOffset("DT_CSPlayer", "m_nHeavyAssaultSuitCooldownRemaining");
	DT_CSPlayer.m_flFlashDuration = GetOffset("DT_CSPlayer", "m_flFlashDuration");
	DT_CSPlayer.m_flFlashMaxAlpha = GetOffset("DT_CSPlayer", "m_flFlashMaxAlpha");
	DT_CSPlayer.m_iProgressBarDuration = GetOffset("DT_CSPlayer", "m_iProgressBarDuration");
	DT_CSPlayer.m_flProgressBarStartTime = GetOffset("DT_CSPlayer", "m_flProgressBarStartTime");
	DT_CSPlayer.m_hRagdoll = GetOffset("DT_CSPlayer", "m_hRagdoll");
	DT_CSPlayer.m_cycleLatch = GetOffset("DT_CSPlayer", "m_cycleLatch");
	DT_CSPlayer.m_unCurrentEquipmentValue = GetOffset("DT_CSPlayer", "m_unCurrentEquipmentValue");
	DT_CSPlayer.m_unRoundStartEquipmentValue = GetOffset("DT_CSPlayer", "m_unRoundStartEquipmentValue");
	DT_CSPlayer.m_unFreezetimeEndEquipmentValue = GetOffset("DT_CSPlayer", "m_unFreezetimeEndEquipmentValue");
	DT_CSPlayer.m_bIsControllingBot = GetOffset("DT_CSPlayer", "m_bIsControllingBot");
	DT_CSPlayer.m_bHasControlledBotThisRound = GetOffset("DT_CSPlayer", "m_bHasControlledBotThisRound");
	DT_CSPlayer.m_bCanControlObservedBot = GetOffset("DT_CSPlayer", "m_bCanControlObservedBot");
	DT_CSPlayer.m_iControlledBotEntIndex = GetOffset("DT_CSPlayer", "m_iControlledBotEntIndex");
	DT_CSPlayer.m_vecAutomoveTargetEnd = GetOffset("DT_CSPlayer", "m_vecAutomoveTargetEnd");
	DT_CSPlayer.m_flAutoMoveStartTime = GetOffset("DT_CSPlayer", "m_flAutoMoveStartTime");
	DT_CSPlayer.m_flAutoMoveTargetTime = GetOffset("DT_CSPlayer", "m_flAutoMoveTargetTime");
	DT_CSPlayer.m_bIsAssassinationTarget = GetOffset("DT_CSPlayer", "m_bIsAssassinationTarget");
	DT_CSPlayer.m_bHud_MiniScoreHidden = GetOffset("DT_CSPlayer", "m_bHud_MiniScoreHidden");
	DT_CSPlayer.m_bHud_RadarHidden = GetOffset("DT_CSPlayer", "m_bHud_RadarHidden");
	DT_CSPlayer.m_nLastKillerIndex = GetOffset("DT_CSPlayer", "m_nLastKillerIndex");
	DT_CSPlayer.m_nLastConcurrentKilled = GetOffset("DT_CSPlayer", "m_nLastConcurrentKilled");
	DT_CSPlayer.m_nDeathCamMusic = GetOffset("DT_CSPlayer", "m_nDeathCamMusic");
	DT_CSPlayer.m_bIsHoldingLookAtWeapon = GetOffset("DT_CSPlayer", "m_bIsHoldingLookAtWeapon");
	DT_CSPlayer.m_bIsLookingAtWeapon = GetOffset("DT_CSPlayer", "m_bIsLookingAtWeapon");
	DT_CSPlayer.m_iNumRoundKillsHeadshots = GetOffset("DT_CSPlayer", "m_iNumRoundKillsHeadshots");
	DT_CSPlayer.m_unTotalRoundDamageDealt = GetOffset("DT_CSPlayer", "m_unTotalRoundDamageDealt");
	DT_CSPlayer.m_flLowerBodyYawTarget = GetOffset("DT_CSPlayer", "m_flLowerBodyYawTarget");
	DT_CSPlayer.m_bStrafing = GetOffset("DT_CSPlayer", "m_bStrafing");
	DT_CSPlayer.m_flThirdpersonRecoil = GetOffset("DT_CSPlayer", "m_flThirdpersonRecoil");
	DT_CSPlayer.m_bHideTargetID = GetOffset("DT_CSPlayer", "m_bHideTargetID");
	DT_CSPlayer.m_bHasParachute = GetOffset("DT_CSPlayer", "m_bHasParachute");
	DT_CSPlayer.m_bIsSpawnRappelling = GetOffset("DT_CSPlayer", "m_bIsSpawnRappelling");
	DT_CSPlayer.m_vecSpawnRappellingRopeOrigin = GetOffset("DT_CSPlayer", "m_vecSpawnRappellingRopeOrigin");
	DT_CSPlayer.m_nSurvivalTeam = GetOffset("DT_CSPlayer", "m_nSurvivalTeam");
	DT_CSPlayer.m_hSurvivalAssassinationTarget = GetOffset("DT_CSPlayer", "m_hSurvivalAssassinationTarget");
	DT_CSPlayer.m_flHealthShotBoostExpirationTime = GetOffset("DT_CSPlayer", "m_flHealthShotBoostExpirationTime");
	DT_CSRagdoll.m_vecOrigin = GetOffset("DT_CSRagdoll", "m_vecOrigin");
	DT_CSRagdoll.m_vecRagdollOrigin = GetOffset("DT_CSRagdoll", "m_vecRagdollOrigin");
	DT_CSRagdoll.m_hPlayer = GetOffset("DT_CSRagdoll", "m_hPlayer");
	DT_CSRagdoll.m_nModelIndex = GetOffset("DT_CSRagdoll", "m_nModelIndex");
	DT_CSRagdoll.m_nForceBone = GetOffset("DT_CSRagdoll", "m_nForceBone");
	DT_CSRagdoll.m_vecForce = GetOffset("DT_CSRagdoll", "m_vecForce");
	DT_CSRagdoll.m_vecRagdollVelocity = GetOffset("DT_CSRagdoll", "m_vecRagdollVelocity");
	DT_CSRagdoll.m_iDeathPose = GetOffset("DT_CSRagdoll", "m_iDeathPose");
	DT_CSRagdoll.m_iDeathFrame = GetOffset("DT_CSRagdoll", "m_iDeathFrame");
	DT_CSRagdoll.m_iTeamNum = GetOffset("DT_CSRagdoll", "m_iTeamNum");
	DT_CSRagdoll.m_bClientSideAnimation = GetOffset("DT_CSRagdoll", "m_bClientSideAnimation");
	DT_CSRagdoll.m_flDeathYaw = GetOffset("DT_CSRagdoll", "m_flDeathYaw");
	DT_CSRagdoll.m_flAbsYaw = GetOffset("DT_CSRagdoll", "m_flAbsYaw");
	DT_TEPlayerAnimEvent.m_hPlayer = GetOffset("DT_TEPlayerAnimEvent", "m_hPlayer");
	DT_TEPlayerAnimEvent.m_iEvent = GetOffset("DT_TEPlayerAnimEvent", "m_iEvent");
	DT_TEPlayerAnimEvent.m_nData = GetOffset("DT_TEPlayerAnimEvent", "m_nData");
	DT_CHostage.m_isRescued = GetOffset("DT_CHostage", "m_isRescued");
	DT_CHostage.m_jumpedThisFrame = GetOffset("DT_CHostage", "m_jumpedThisFrame");
	DT_CHostage.m_iHealth = GetOffset("DT_CHostage", "m_iHealth");
	DT_CHostage.m_iMaxHealth = GetOffset("DT_CHostage", "m_iMaxHealth");
	DT_CHostage.m_lifeState = GetOffset("DT_CHostage", "m_lifeState");
	DT_CHostage.m_fFlags = GetOffset("DT_CHostage", "m_fFlags");
	DT_CHostage.m_nHostageState = GetOffset("DT_CHostage", "m_nHostageState");
	DT_CHostage.m_flRescueStartTime = GetOffset("DT_CHostage", "m_flRescueStartTime");
	DT_CHostage.m_flGrabSuccessTime = GetOffset("DT_CHostage", "m_flGrabSuccessTime");
	DT_CHostage.m_flDropStartTime = GetOffset("DT_CHostage", "m_flDropStartTime");
	DT_CHostage.m_vel = GetOffset("DT_CHostage", "m_vel");
	DT_CHostage.m_leader = GetOffset("DT_CHostage", "m_leader");
	DT_BaseCSGrenadeProjectile.m_vInitialVelocity = GetOffset("DT_BaseCSGrenadeProjectile", "m_vInitialVelocity");
	DT_BaseCSGrenadeProjectile.m_nBounces = GetOffset("DT_BaseCSGrenadeProjectile", "m_nBounces");
	DT_HandleTest.m_Handle = GetOffset("DT_HandleTest", "m_Handle");
	DT_HandleTest.m_bSendHandle = GetOffset("DT_HandleTest", "m_bSendHandle");
	DT_TeamplayRoundBasedRulesProxy.teamplayroundbased_gamerules_data = GetOffset("DT_TeamplayRoundBasedRulesProxy", "teamplayroundbased_gamerules_data");
	DT_SpriteTrail.m_flLifeTime = GetOffset("DT_SpriteTrail", "m_flLifeTime");
	DT_SpriteTrail.m_flStartWidth = GetOffset("DT_SpriteTrail", "m_flStartWidth");
	DT_SpriteTrail.m_flEndWidth = GetOffset("DT_SpriteTrail", "m_flEndWidth");
	DT_SpriteTrail.m_flStartWidthVariance = GetOffset("DT_SpriteTrail", "m_flStartWidthVariance");
	DT_SpriteTrail.m_flTextureRes = GetOffset("DT_SpriteTrail", "m_flTextureRes");
	DT_SpriteTrail.m_flMinFadeLength = GetOffset("DT_SpriteTrail", "m_flMinFadeLength");
	DT_SpriteTrail.m_vecSkyboxOrigin = GetOffset("DT_SpriteTrail", "m_vecSkyboxOrigin");
	DT_SpriteTrail.m_flSkyboxScale = GetOffset("DT_SpriteTrail", "m_flSkyboxScale");
	DT_Sprite.m_hAttachedToEntity = GetOffset("DT_Sprite", "m_hAttachedToEntity");
	DT_Sprite.m_nAttachment = GetOffset("DT_Sprite", "m_nAttachment");
	DT_Sprite.m_flScaleTime = GetOffset("DT_Sprite", "m_flScaleTime");
	DT_Sprite.m_flSpriteScale = GetOffset("DT_Sprite", "m_flSpriteScale");
	DT_Sprite.m_flSpriteFramerate = GetOffset("DT_Sprite", "m_flSpriteFramerate");
	DT_Sprite.m_flGlowProxySize = GetOffset("DT_Sprite", "m_flGlowProxySize");
	DT_Sprite.m_flHDRColorScale = GetOffset("DT_Sprite", "m_flHDRColorScale");
	DT_Sprite.m_flFrame = GetOffset("DT_Sprite", "m_flFrame");
	DT_Sprite.m_flBrightnessTime = GetOffset("DT_Sprite", "m_flBrightnessTime");
	DT_Sprite.m_nBrightness = GetOffset("DT_Sprite", "m_nBrightness");
	DT_Sprite.m_bWorldSpaceScale = GetOffset("DT_Sprite", "m_bWorldSpaceScale");
	DT_Ragdoll_Attached.m_boneIndexAttached = GetOffset("DT_Ragdoll_Attached", "m_boneIndexAttached");
	DT_Ragdoll_Attached.m_ragdollAttachedObjectIndex = GetOffset("DT_Ragdoll_Attached", "m_ragdollAttachedObjectIndex");
	DT_Ragdoll_Attached.m_attachmentPointBoneSpace = GetOffset("DT_Ragdoll_Attached", "m_attachmentPointBoneSpace");
	DT_Ragdoll_Attached.m_attachmentPointRagdollSpace = GetOffset("DT_Ragdoll_Attached", "m_attachmentPointRagdollSpace");
	DT_Ragdoll.m_ragAngles = GetOffset("DT_Ragdoll", "m_ragAngles[0]");
	DT_Ragdoll.m_ragPos = GetOffset("DT_Ragdoll", "m_ragPos[0]");
	DT_Ragdoll.m_hUnragdoll = GetOffset("DT_Ragdoll", "m_hUnragdoll");
	DT_Ragdoll.m_flBlendWeight = GetOffset("DT_Ragdoll", "m_flBlendWeight");
	DT_Ragdoll.m_nOverlaySequence = GetOffset("DT_Ragdoll", "m_nOverlaySequence");
	DT_PropCounter.m_flDisplayValue = GetOffset("DT_PropCounter", "m_flDisplayValue");
	DT_PoseController.m_hProps = GetOffset("DT_PoseController", "m_hProps");
	DT_PoseController.m_chPoseIndex = GetOffset("DT_PoseController", "m_chPoseIndex");
	DT_PoseController.m_bPoseValueParity = GetOffset("DT_PoseController", "m_bPoseValueParity");
	DT_PoseController.m_fPoseValue = GetOffset("DT_PoseController", "m_fPoseValue");
	DT_PoseController.m_fInterpolationTime = GetOffset("DT_PoseController", "m_fInterpolationTime");
	DT_PoseController.m_bInterpolationWrap = GetOffset("DT_PoseController", "m_bInterpolationWrap");
	DT_PoseController.m_fCycleFrequency = GetOffset("DT_PoseController", "m_fCycleFrequency");
	DT_PoseController.m_nFModType = GetOffset("DT_PoseController", "m_nFModType");
	DT_PoseController.m_fFModTimeOffset = GetOffset("DT_PoseController", "m_fFModTimeOffset");
	DT_PoseController.m_fFModRate = GetOffset("DT_PoseController", "m_fFModRate");
	DT_PoseController.m_fFModAmplitude = GetOffset("DT_PoseController", "m_fFModAmplitude");
	DT_GrassBurn.m_flGrassBurnClearTime = GetOffset("DT_GrassBurn", "m_flGrassBurnClearTime");
	DT_FuncLadder.m_vecPlayerMountPositionTop = GetOffset("DT_FuncLadder", "m_vecPlayerMountPositionTop");
	DT_FuncLadder.m_vecPlayerMountPositionBottom = GetOffset("DT_FuncLadder", "m_vecPlayerMountPositionBottom");
	DT_FuncLadder.m_vecLadderDir = GetOffset("DT_FuncLadder", "m_vecLadderDir");
	DT_FuncLadder.m_bFakeLadder = GetOffset("DT_FuncLadder", "m_bFakeLadder");
	DT_TEFoundryHelpers.m_iEntity = GetOffset("DT_TEFoundryHelpers", "m_iEntity");
	DT_DetailController.m_flFadeStartDist = GetOffset("DT_DetailController", "m_flFadeStartDist");
	DT_DetailController.m_flFadeEndDist = GetOffset("DT_DetailController", "m_flFadeEndDist");
	DT_DangerZone.m_vecDangerZoneOriginStartedAt = GetOffset("DT_DangerZone", "m_vecDangerZoneOriginStartedAt");
	DT_DangerZone.m_flBombLaunchTime = GetOffset("DT_DangerZone", "m_flBombLaunchTime");
	DT_DangerZone.m_flExtraRadius = GetOffset("DT_DangerZone", "m_flExtraRadius");
	DT_DangerZone.m_flExtraRadiusStartTime = GetOffset("DT_DangerZone", "m_flExtraRadiusStartTime");
	DT_DangerZone.m_flExtraRadiusTotalLerpTime = GetOffset("DT_DangerZone", "m_flExtraRadiusTotalLerpTime");
	DT_DangerZone.m_nDropOrder = GetOffset("DT_DangerZone", "m_nDropOrder");
	DT_DangerZone.m_iWave = GetOffset("DT_DangerZone", "m_iWave");
	DT_DangerZoneController.m_bDangerZoneControllerEnabled = GetOffset("DT_DangerZoneController", "m_bDangerZoneControllerEnabled");
	DT_DangerZoneController.m_flStartTime = GetOffset("DT_DangerZoneController", "m_flStartTime");
	DT_DangerZoneController.m_flFinalExpansionTime = GetOffset("DT_DangerZoneController", "m_flFinalExpansionTime");
	DT_DangerZoneController.m_vecEndGameCircleStart = GetOffset("DT_DangerZoneController", "m_vecEndGameCircleStart");
	DT_DangerZoneController.m_vecEndGameCircleEnd = GetOffset("DT_DangerZoneController", "m_vecEndGameCircleEnd");
	DT_DangerZoneController.m_DangerZones = GetOffset("DT_DangerZoneController", "m_DangerZones");
	DT_DangerZoneController.m_flWaveEndTimes = GetOffset("DT_DangerZoneController", "m_flWaveEndTimes");
	DT_DangerZoneController.m_hTheFinalZone = GetOffset("DT_DangerZoneController", "m_hTheFinalZone");
	DT_WorldVguiText.m_bEnabled = GetOffset("DT_WorldVguiText", "m_bEnabled");
	DT_WorldVguiText.m_szDisplayText = GetOffset("DT_WorldVguiText", "m_szDisplayText");
	DT_WorldVguiText.m_szDisplayTextOption = GetOffset("DT_WorldVguiText", "m_szDisplayTextOption");
	DT_WorldVguiText.m_szFont = GetOffset("DT_WorldVguiText", "m_szFont");
	DT_WorldVguiText.m_iTextPanelWidth = GetOffset("DT_WorldVguiText", "m_iTextPanelWidth");
	DT_WorldVguiText.m_clrText = GetOffset("DT_WorldVguiText", "m_clrText");
	DT_World.m_flWaveHeight = GetOffset("DT_World", "m_flWaveHeight");
	DT_World.m_WorldMins = GetOffset("DT_World", "m_WorldMins");
	DT_World.m_WorldMaxs = GetOffset("DT_World", "m_WorldMaxs");
	DT_World.m_bStartDark = GetOffset("DT_World", "m_bStartDark");
	DT_World.m_flMaxOccludeeArea = GetOffset("DT_World", "m_flMaxOccludeeArea");
	DT_World.m_flMinOccluderArea = GetOffset("DT_World", "m_flMinOccluderArea");
	DT_World.m_flMaxPropScreenSpaceWidth = GetOffset("DT_World", "m_flMaxPropScreenSpaceWidth");
	DT_World.m_flMinPropScreenSpaceWidth = GetOffset("DT_World", "m_flMinPropScreenSpaceWidth");
	DT_World.m_iszDetailSpriteMaterial = GetOffset("DT_World", "m_iszDetailSpriteMaterial");
	DT_World.m_bColdWorld = GetOffset("DT_World", "m_bColdWorld");
	DT_World.m_iTimeOfDay = GetOffset("DT_World", "m_iTimeOfDay");
	DT_WaterLODControl.m_flCheapWaterStartDistance = GetOffset("DT_WaterLODControl", "m_flCheapWaterStartDistance");
	DT_WaterLODControl.m_flCheapWaterEndDistance = GetOffset("DT_WaterLODControl", "m_flCheapWaterEndDistance");
	DT_VoteController.m_iActiveIssueIndex = GetOffset("DT_VoteController", "m_iActiveIssueIndex");
	DT_VoteController.m_iOnlyTeamToVote = GetOffset("DT_VoteController", "m_iOnlyTeamToVote");
	DT_VoteController.m_nVoteOptionCount = GetOffset("DT_VoteController", "m_nVoteOptionCount");
	DT_VoteController.m_nPotentialVotes = GetOffset("DT_VoteController", "m_nPotentialVotes");
	DT_VoteController.m_bIsYesNoVote = GetOffset("DT_VoteController", "m_bIsYesNoVote");
	DT_VGuiScreen.m_flWidth = GetOffset("DT_VGuiScreen", "m_flWidth");
	DT_VGuiScreen.m_flHeight = GetOffset("DT_VGuiScreen", "m_flHeight");
	DT_VGuiScreen.m_fScreenFlags = GetOffset("DT_VGuiScreen", "m_fScreenFlags");
	DT_VGuiScreen.m_nPanelName = GetOffset("DT_VGuiScreen", "m_nPanelName");
	DT_VGuiScreen.m_nAttachmentIndex = GetOffset("DT_VGuiScreen", "m_nAttachmentIndex");
	DT_VGuiScreen.m_nOverlayMaterial = GetOffset("DT_VGuiScreen", "m_nOverlayMaterial");
	DT_VGuiScreen.m_hPlayerOwner = GetOffset("DT_VGuiScreen", "m_hPlayerOwner");
	DT_PropJeep.m_bHeadlightIsOn = GetOffset("DT_PropJeep", "m_bHeadlightIsOn");
	DT_PropVehicleChoreoGeneric.m_hPlayer = GetOffset("DT_PropVehicleChoreoGeneric", "m_hPlayer");
	DT_PropVehicleChoreoGeneric.m_bEnterAnimOn = GetOffset("DT_PropVehicleChoreoGeneric", "m_bEnterAnimOn");
	DT_PropVehicleChoreoGeneric.m_bExitAnimOn = GetOffset("DT_PropVehicleChoreoGeneric", "m_bExitAnimOn");
	DT_PropVehicleChoreoGeneric.m_bForceEyesToAttachment = GetOffset("DT_PropVehicleChoreoGeneric", "m_bForceEyesToAttachment");
	DT_PropVehicleChoreoGeneric.m_vecEyeExitEndpoint = GetOffset("DT_PropVehicleChoreoGeneric", "m_vecEyeExitEndpoint");
	DT_PropVehicleChoreoGeneric.m_vehicleView_bClampEyeAngles = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.bClampEyeAngles");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flPitchCurveZero = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flPitchCurveZero");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flPitchCurveLinear = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flPitchCurveLinear");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flRollCurveZero = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flRollCurveZero");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flRollCurveLinear = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flRollCurveLinear");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flFOV = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flFOV");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flYawMin = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flYawMin");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flYawMax = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flYawMax");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flPitchMin = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flPitchMin");
	DT_PropVehicleChoreoGeneric.m_vehicleView_flPitchMax = GetOffset("DT_PropVehicleChoreoGeneric", "m_vehicleView.flPitchMax");
	DT_TriggerSoundOperator.m_nSoundOperator = GetOffset("DT_TriggerSoundOperator", "m_nSoundOperator");
	DT_BaseTrigger.m_bClientSidePredicted = GetOffset("DT_BaseTrigger", "m_bClientSidePredicted");
	DT_BaseTrigger.m_spawnflags = GetOffset("DT_BaseTrigger", "m_spawnflags");
	DT_ProxyToggle.blah = GetOffset("DT_ProxyToggle", "blah");
	DT_Tesla.m_SoundName = GetOffset("DT_Tesla", "m_SoundName");
	DT_Tesla.m_iszSpriteName = GetOffset("DT_Tesla", "m_iszSpriteName");
	DT_BaseTeamObjectiveResource.m_iTimerToShowInHUD = GetOffset("DT_BaseTeamObjectiveResource", "m_iTimerToShowInHUD");
	DT_BaseTeamObjectiveResource.m_iStopWatchTimer = GetOffset("DT_BaseTeamObjectiveResource", "m_iStopWatchTimer");
	DT_BaseTeamObjectiveResource.m_iNumControlPoints = GetOffset("DT_BaseTeamObjectiveResource", "m_iNumControlPoints");
	DT_BaseTeamObjectiveResource.m_bPlayingMiniRounds = GetOffset("DT_BaseTeamObjectiveResource", "m_bPlayingMiniRounds");
	DT_BaseTeamObjectiveResource.m_bControlPointsReset = GetOffset("DT_BaseTeamObjectiveResource", "m_bControlPointsReset");
	DT_BaseTeamObjectiveResource.m_iUpdateCapHudParity = GetOffset("DT_BaseTeamObjectiveResource", "m_iUpdateCapHudParity");
	DT_BaseTeamObjectiveResource.m_vCPPositions = GetOffset("DT_BaseTeamObjectiveResource", "m_vCPPositions[0]");
	DT_BaseTeamObjectiveResource.m_bCPIsVisible = GetOffset("DT_BaseTeamObjectiveResource", "m_bCPIsVisible");
	DT_BaseTeamObjectiveResource.m_flLazyCapPerc = GetOffset("DT_BaseTeamObjectiveResource", "m_flLazyCapPerc");
	DT_BaseTeamObjectiveResource.m_iTeamIcons = GetOffset("DT_BaseTeamObjectiveResource", "m_iTeamIcons");
	DT_BaseTeamObjectiveResource.m_iTeamOverlays = GetOffset("DT_BaseTeamObjectiveResource", "m_iTeamOverlays");
	DT_BaseTeamObjectiveResource.m_iTeamReqCappers = GetOffset("DT_BaseTeamObjectiveResource", "m_iTeamReqCappers");
	DT_BaseTeamObjectiveResource.m_flTeamCapTime = GetOffset("DT_BaseTeamObjectiveResource", "m_flTeamCapTime");
	DT_BaseTeamObjectiveResource.m_iPreviousPoints = GetOffset("DT_BaseTeamObjectiveResource", "m_iPreviousPoints");
	DT_BaseTeamObjectiveResource.m_bTeamCanCap = GetOffset("DT_BaseTeamObjectiveResource", "m_bTeamCanCap");
	DT_BaseTeamObjectiveResource.m_iTeamBaseIcons = GetOffset("DT_BaseTeamObjectiveResource", "m_iTeamBaseIcons");
	DT_BaseTeamObjectiveResource.m_iBaseControlPoints = GetOffset("DT_BaseTeamObjectiveResource", "m_iBaseControlPoints");
	DT_BaseTeamObjectiveResource.m_bInMiniRound = GetOffset("DT_BaseTeamObjectiveResource", "m_bInMiniRound");
	DT_BaseTeamObjectiveResource.m_iWarnOnCap = GetOffset("DT_BaseTeamObjectiveResource", "m_iWarnOnCap");
	DT_BaseTeamObjectiveResource.m_iszWarnSound = GetOffset("DT_BaseTeamObjectiveResource", "m_iszWarnSound[0]");
	DT_BaseTeamObjectiveResource.m_flPathDistance = GetOffset("DT_BaseTeamObjectiveResource", "m_flPathDistance");
	DT_BaseTeamObjectiveResource.m_iNumTeamMembers = GetOffset("DT_BaseTeamObjectiveResource", "m_iNumTeamMembers");
	DT_BaseTeamObjectiveResource.m_iCappingTeam = GetOffset("DT_BaseTeamObjectiveResource", "m_iCappingTeam");
	DT_BaseTeamObjectiveResource.m_iTeamInZone = GetOffset("DT_BaseTeamObjectiveResource", "m_iTeamInZone");
	DT_BaseTeamObjectiveResource.m_bBlocked = GetOffset("DT_BaseTeamObjectiveResource", "m_bBlocked");
	DT_BaseTeamObjectiveResource.m_iOwner = GetOffset("DT_BaseTeamObjectiveResource", "m_iOwner");
	DT_BaseTeamObjectiveResource.m_pszCapLayoutInHUD = GetOffset("DT_BaseTeamObjectiveResource", "m_pszCapLayoutInHUD");
	DT_Team.m_iTeamNum = GetOffset("DT_Team", "m_iTeamNum");
	DT_Team.m_bSurrendered = GetOffset("DT_Team", "m_bSurrendered");
	DT_Team.m_scoreTotal = GetOffset("DT_Team", "m_scoreTotal");
	DT_Team.m_scoreFirstHalf = GetOffset("DT_Team", "m_scoreFirstHalf");
	DT_Team.m_scoreSecondHalf = GetOffset("DT_Team", "m_scoreSecondHalf");
	DT_Team.m_scoreOvertime = GetOffset("DT_Team", "m_scoreOvertime");
	DT_Team.m_iClanID = GetOffset("DT_Team", "m_iClanID");
	DT_Team.m_szTeamname = GetOffset("DT_Team", "m_szTeamname");
	DT_Team.m_szClanTeamname = GetOffset("DT_Team", "m_szClanTeamname");
	DT_Team.m_szTeamFlagImage = GetOffset("DT_Team", "m_szTeamFlagImage");
	DT_Team.m_szTeamLogoImage = GetOffset("DT_Team", "m_szTeamLogoImage");
	DT_Team.m_szTeamMatchStat = GetOffset("DT_Team", "m_szTeamMatchStat");
	DT_Team.m_nGGLeaderEntIndex_CT = GetOffset("DT_Team", "m_nGGLeaderEntIndex_CT");
	DT_Team.m_nGGLeaderEntIndex_T = GetOffset("DT_Team", "m_nGGLeaderEntIndex_T");
	DT_Team.m_numMapVictories = GetOffset("DT_Team", "m_numMapVictories");
	DT_Team.player_array_element = GetOffset("DT_Team", "player_array_element");
	DT_Team.player_array = GetOffset("DT_Team", "\"player_array\"");
	DT_SunlightShadowControl.m_shadowDirection = GetOffset("DT_SunlightShadowControl", "m_shadowDirection");
	DT_SunlightShadowControl.m_bEnabled = GetOffset("DT_SunlightShadowControl", "m_bEnabled");
	DT_SunlightShadowControl.m_TextureName = GetOffset("DT_SunlightShadowControl", "m_TextureName");
	DT_SunlightShadowControl.m_LightColor = GetOffset("DT_SunlightShadowControl", "m_LightColor");
	DT_SunlightShadowControl.m_flColorTransitionTime = GetOffset("DT_SunlightShadowControl", "m_flColorTransitionTime");
	DT_SunlightShadowControl.m_flSunDistance = GetOffset("DT_SunlightShadowControl", "m_flSunDistance");
	DT_SunlightShadowControl.m_flFOV = GetOffset("DT_SunlightShadowControl", "m_flFOV");
	DT_SunlightShadowControl.m_flNearZ = GetOffset("DT_SunlightShadowControl", "m_flNearZ");
	DT_SunlightShadowControl.m_flNorthOffset = GetOffset("DT_SunlightShadowControl", "m_flNorthOffset");
	DT_SunlightShadowControl.m_bEnableShadows = GetOffset("DT_SunlightShadowControl", "m_bEnableShadows");
	DT_Sun.m_clrRender = GetOffset("DT_Sun", "m_clrRender");
	DT_Sun.m_clrOverlay = GetOffset("DT_Sun", "m_clrOverlay");
	DT_Sun.m_vDirection = GetOffset("DT_Sun", "m_vDirection");
	DT_Sun.m_bOn = GetOffset("DT_Sun", "m_bOn");
	DT_Sun.m_nSize = GetOffset("DT_Sun", "m_nSize");
	DT_Sun.m_nOverlaySize = GetOffset("DT_Sun", "m_nOverlaySize");
	DT_Sun.m_nMaterial = GetOffset("DT_Sun", "m_nMaterial");
	DT_Sun.m_nOverlayMaterial = GetOffset("DT_Sun", "m_nOverlayMaterial");
	DT_Sun.HDRColorScale = GetOffset("DT_Sun", "HDRColorScale");
	DT_Sun.glowDistanceScale = GetOffset("DT_Sun", "glowDistanceScale");
	DT_ParticlePerformanceMonitor.m_bMeasurePerf = GetOffset("DT_ParticlePerformanceMonitor", "m_bMeasurePerf");
	DT_ParticlePerformanceMonitor.m_bDisplayPerf = GetOffset("DT_ParticlePerformanceMonitor", "m_bDisplayPerf");
	DT_SpotlightEnd.m_flLightScale = GetOffset("DT_SpotlightEnd", "m_flLightScale");
	DT_SpotlightEnd.m_Radius = GetOffset("DT_SpotlightEnd", "m_Radius");
	DT_SpatialEntity.m_vecOrigin = GetOffset("DT_SpatialEntity", "m_vecOrigin");
	DT_SpatialEntity.m_minFalloff = GetOffset("DT_SpatialEntity", "m_minFalloff");
	DT_SpatialEntity.m_maxFalloff = GetOffset("DT_SpatialEntity", "m_maxFalloff");
	DT_SpatialEntity.m_flCurWeight = GetOffset("DT_SpatialEntity", "m_flCurWeight");
	DT_SpatialEntity.m_bEnabled = GetOffset("DT_SpatialEntity", "m_bEnabled");
	DT_SlideshowDisplay.m_bEnabled = GetOffset("DT_SlideshowDisplay", "m_bEnabled");
	DT_SlideshowDisplay.m_szDisplayText = GetOffset("DT_SlideshowDisplay", "m_szDisplayText");
	DT_SlideshowDisplay.m_szSlideshowDirectory = GetOffset("DT_SlideshowDisplay", "m_szSlideshowDirectory");
	DT_SlideshowDisplay.m_chCurrentSlideLists = GetOffset("DT_SlideshowDisplay", "m_chCurrentSlideLists");
	DT_SlideshowDisplay.m_fMinSlideTime = GetOffset("DT_SlideshowDisplay", "m_fMinSlideTime");
	DT_SlideshowDisplay.m_fMaxSlideTime = GetOffset("DT_SlideshowDisplay", "m_fMaxSlideTime");
	DT_SlideshowDisplay.m_iCycleType = GetOffset("DT_SlideshowDisplay", "m_iCycleType");
	DT_SlideshowDisplay.m_bNoListRepeats = GetOffset("DT_SlideshowDisplay", "m_bNoListRepeats");
	DT_ShadowControl.m_shadowDirection = GetOffset("DT_ShadowControl", "m_shadowDirection");
	DT_ShadowControl.m_shadowColor = GetOffset("DT_ShadowControl", "m_shadowColor");
	DT_ShadowControl.m_flShadowMaxDist = GetOffset("DT_ShadowControl", "m_flShadowMaxDist");
	DT_ShadowControl.m_bDisableShadows = GetOffset("DT_ShadowControl", "m_bDisableShadows");
	DT_ShadowControl.m_bEnableLocalLightShadows = GetOffset("DT_ShadowControl", "m_bEnableLocalLightShadows");
	DT_SceneEntity.m_nSceneStringIndex = GetOffset("DT_SceneEntity", "m_nSceneStringIndex");
	DT_SceneEntity.m_bIsPlayingBack = GetOffset("DT_SceneEntity", "m_bIsPlayingBack");
	DT_SceneEntity.m_bPaused = GetOffset("DT_SceneEntity", "m_bPaused");
	DT_SceneEntity.m_bMultiplayer = GetOffset("DT_SceneEntity", "m_bMultiplayer");
	DT_SceneEntity.m_flForceClientTime = GetOffset("DT_SceneEntity", "m_flForceClientTime");
	DT_SceneEntity.m_hActorList = GetOffset("DT_SceneEntity", "m_hActorList");
	DT_RopeKeyframe.m_nChangeCount = GetOffset("DT_RopeKeyframe", "m_nChangeCount");
	DT_RopeKeyframe.m_iRopeMaterialModelIndex = GetOffset("DT_RopeKeyframe", "m_iRopeMaterialModelIndex");
	DT_RopeKeyframe.m_hStartPoint = GetOffset("DT_RopeKeyframe", "m_hStartPoint");
	DT_RopeKeyframe.m_hEndPoint = GetOffset("DT_RopeKeyframe", "m_hEndPoint");
	DT_RopeKeyframe.m_iStartAttachment = GetOffset("DT_RopeKeyframe", "m_iStartAttachment");
	DT_RopeKeyframe.m_iEndAttachment = GetOffset("DT_RopeKeyframe", "m_iEndAttachment");
	DT_RopeKeyframe.m_fLockedPoints = GetOffset("DT_RopeKeyframe", "m_fLockedPoints");
	DT_RopeKeyframe.m_Slack = GetOffset("DT_RopeKeyframe", "m_Slack");
	DT_RopeKeyframe.m_RopeLength = GetOffset("DT_RopeKeyframe", "m_RopeLength");
	DT_RopeKeyframe.m_RopeFlags = GetOffset("DT_RopeKeyframe", "m_RopeFlags");
	DT_RopeKeyframe.m_TextureScale = GetOffset("DT_RopeKeyframe", "m_TextureScale");
	DT_RopeKeyframe.m_nSegments = GetOffset("DT_RopeKeyframe", "m_nSegments");
	DT_RopeKeyframe.m_bConstrainBetweenEndpoints = GetOffset("DT_RopeKeyframe", "m_bConstrainBetweenEndpoints");
	DT_RopeKeyframe.m_Subdiv = GetOffset("DT_RopeKeyframe", "m_Subdiv");
	DT_RopeKeyframe.m_Width = GetOffset("DT_RopeKeyframe", "m_Width");
	DT_RopeKeyframe.m_flScrollSpeed = GetOffset("DT_RopeKeyframe", "m_flScrollSpeed");
	DT_RopeKeyframe.m_vecOrigin = GetOffset("DT_RopeKeyframe", "m_vecOrigin");
	DT_RopeKeyframe.moveparent = GetOffset("DT_RopeKeyframe", "moveparent");
	DT_RopeKeyframe.m_iParentAttachment = GetOffset("DT_RopeKeyframe", "m_iParentAttachment");
	DT_RopeKeyframe.m_iDefaultRopeMaterialModelIndex = GetOffset("DT_RopeKeyframe", "m_iDefaultRopeMaterialModelIndex");
	DT_RopeKeyframe.m_nMinCPULevel = GetOffset("DT_RopeKeyframe", "m_nMinCPULevel");
	DT_RopeKeyframe.m_nMaxCPULevel = GetOffset("DT_RopeKeyframe", "m_nMaxCPULevel");
	DT_RopeKeyframe.m_nMinGPULevel = GetOffset("DT_RopeKeyframe", "m_nMinGPULevel");
	DT_RopeKeyframe.m_nMaxGPULevel = GetOffset("DT_RopeKeyframe", "m_nMaxGPULevel");
	DT_PhysicsPropMultiplayer.m_iPhysicsMode = GetOffset("DT_PhysicsPropMultiplayer", "m_iPhysicsMode");
	DT_PhysicsPropMultiplayer.m_fMass = GetOffset("DT_PhysicsPropMultiplayer", "m_fMass");
	DT_PhysicsPropMultiplayer.m_collisionMins = GetOffset("DT_PhysicsPropMultiplayer", "m_collisionMins");
	DT_PhysicsPropMultiplayer.m_collisionMaxs = GetOffset("DT_PhysicsPropMultiplayer", "m_collisionMaxs");
	DT_PhysBoxMultiplayer.m_iPhysicsMode = GetOffset("DT_PhysBoxMultiplayer", "m_iPhysicsMode");
	DT_PhysBoxMultiplayer.m_fMass = GetOffset("DT_PhysBoxMultiplayer", "m_fMass");
	DT_DynamicProp.m_bUseHitboxesForRenderBox = GetOffset("DT_DynamicProp", "m_bUseHitboxesForRenderBox");
	DT_DynamicProp.m_flGlowMaxDist = GetOffset("DT_DynamicProp", "m_flGlowMaxDist");
	DT_DynamicProp.m_bShouldGlow = GetOffset("DT_DynamicProp", "m_bShouldGlow");
	DT_DynamicProp.m_clrGlow = GetOffset("DT_DynamicProp", "m_clrGlow");
	DT_DynamicProp.m_nGlowStyle = GetOffset("DT_DynamicProp", "m_nGlowStyle");
	DT_Prop_Hallucination.m_bEnabled = GetOffset("DT_Prop_Hallucination", "m_bEnabled");
	DT_Prop_Hallucination.m_fVisibleTime = GetOffset("DT_Prop_Hallucination", "m_fVisibleTime");
	DT_Prop_Hallucination.m_fRechargeTime = GetOffset("DT_Prop_Hallucination", "m_fRechargeTime");
	DT_PostProcessController.m_flPostProcessParameters = GetOffset("DT_PostProcessController", "m_flPostProcessParameters");
	DT_PostProcessController.m_bMaster = GetOffset("DT_PostProcessController", "m_bMaster");
	DT_PointWorldText.m_szText = GetOffset("DT_PointWorldText", "m_szText");
	DT_PointWorldText.m_flTextSize = GetOffset("DT_PointWorldText", "m_flTextSize");
	DT_PointWorldText.m_textColor = GetOffset("DT_PointWorldText", "m_textColor");
	DT_PointCommentaryNode.m_bActive = GetOffset("DT_PointCommentaryNode", "m_bActive");
	DT_PointCommentaryNode.m_flStartTime = GetOffset("DT_PointCommentaryNode", "m_flStartTime");
	DT_PointCommentaryNode.m_iszCommentaryFile = GetOffset("DT_PointCommentaryNode", "m_iszCommentaryFile");
	DT_PointCommentaryNode.m_iszCommentaryFileNoHDR = GetOffset("DT_PointCommentaryNode", "m_iszCommentaryFileNoHDR");
	DT_PointCommentaryNode.m_iszSpeakers = GetOffset("DT_PointCommentaryNode", "m_iszSpeakers");
	DT_PointCommentaryNode.m_iNodeNumber = GetOffset("DT_PointCommentaryNode", "m_iNodeNumber");
	DT_PointCommentaryNode.m_iNodeNumberMax = GetOffset("DT_PointCommentaryNode", "m_iNodeNumberMax");
	DT_PointCommentaryNode.m_hViewPosition = GetOffset("DT_PointCommentaryNode", "m_hViewPosition");
	DT_PointCamera.m_FOV = GetOffset("DT_PointCamera", "m_FOV");
	DT_PointCamera.m_Resolution = GetOffset("DT_PointCamera", "m_Resolution");
	DT_PointCamera.m_bFogEnable = GetOffset("DT_PointCamera", "m_bFogEnable");
	DT_PointCamera.m_FogColor = GetOffset("DT_PointCamera", "m_FogColor");
	DT_PointCamera.m_flFogStart = GetOffset("DT_PointCamera", "m_flFogStart");
	DT_PointCamera.m_flFogEnd = GetOffset("DT_PointCamera", "m_flFogEnd");
	DT_PointCamera.m_flFogMaxDensity = GetOffset("DT_PointCamera", "m_flFogMaxDensity");
	DT_PointCamera.m_bActive = GetOffset("DT_PointCamera", "m_bActive");
	DT_PointCamera.m_bUseScreenAspectRatio = GetOffset("DT_PointCamera", "m_bUseScreenAspectRatio");
	DT_PlayerResource.m_iPing = GetOffset("DT_PlayerResource", "m_iPing");
	DT_PlayerResource.m_iKills = GetOffset("DT_PlayerResource", "m_iKills");
	DT_PlayerResource.m_iAssists = GetOffset("DT_PlayerResource", "m_iAssists");
	DT_PlayerResource.m_iDeaths = GetOffset("DT_PlayerResource", "m_iDeaths");
	DT_PlayerResource.m_bConnected = GetOffset("DT_PlayerResource", "m_bConnected");
	DT_PlayerResource.m_iTeam = GetOffset("DT_PlayerResource", "m_iTeam");
	DT_PlayerResource.m_iPendingTeam = GetOffset("DT_PlayerResource", "m_iPendingTeam");
	DT_PlayerResource.m_bAlive = GetOffset("DT_PlayerResource", "m_bAlive");
	DT_PlayerResource.m_iHealth = GetOffset("DT_PlayerResource", "m_iHealth");
	DT_PlayerResource.m_iCoachingTeam = GetOffset("DT_PlayerResource", "m_iCoachingTeam");
	DT_Plasma.m_flStartScale = GetOffset("DT_Plasma", "m_flStartScale");
	DT_Plasma.m_flScale = GetOffset("DT_Plasma", "m_flScale");
	DT_Plasma.m_flScaleTime = GetOffset("DT_Plasma", "m_flScaleTime");
	DT_Plasma.m_nFlags = GetOffset("DT_Plasma", "m_nFlags");
	DT_Plasma.m_nPlasmaModelIndex = GetOffset("DT_Plasma", "m_nPlasmaModelIndex");
	DT_Plasma.m_nPlasmaModelIndex2 = GetOffset("DT_Plasma", "m_nPlasmaModelIndex2");
	DT_Plasma.m_nGlowModelIndex = GetOffset("DT_Plasma", "m_nGlowModelIndex");
	DT_PhysicsProp.m_bAwake = GetOffset("DT_PhysicsProp", "m_bAwake");
	DT_PhysicsProp.m_spawnflags = GetOffset("DT_PhysicsProp", "m_spawnflags");
	DT_StatueProp.m_hInitBaseAnimating = GetOffset("DT_StatueProp", "m_hInitBaseAnimating");
	DT_StatueProp.m_bShatter = GetOffset("DT_StatueProp", "m_bShatter");
	DT_StatueProp.m_nShatterFlags = GetOffset("DT_StatueProp", "m_nShatterFlags");
	DT_StatueProp.m_vShatterPosition = GetOffset("DT_StatueProp", "m_vShatterPosition");
	DT_StatueProp.m_vShatterForce = GetOffset("DT_StatueProp", "m_vShatterForce");
	DT_PhysBox.m_mass = GetOffset("DT_PhysBox", "m_mass");
	DT_ParticleSystem.m_vecOrigin = GetOffset("DT_ParticleSystem", "m_vecOrigin");
	DT_ParticleSystem.m_fEffects = GetOffset("DT_ParticleSystem", "m_fEffects");
	DT_ParticleSystem.m_hOwnerEntity = GetOffset("DT_ParticleSystem", "m_hOwnerEntity");
	DT_ParticleSystem.moveparent = GetOffset("DT_ParticleSystem", "moveparent");
	DT_ParticleSystem.m_iParentAttachment = GetOffset("DT_ParticleSystem", "m_iParentAttachment");
	DT_ParticleSystem.m_angRotation = GetOffset("DT_ParticleSystem", "m_angRotation");
	DT_ParticleSystem.m_iEffectIndex = GetOffset("DT_ParticleSystem", "m_iEffectIndex");
	DT_ParticleSystem.m_bActive = GetOffset("DT_ParticleSystem", "m_bActive");
	DT_ParticleSystem.m_nStopType = GetOffset("DT_ParticleSystem", "m_nStopType");
	DT_ParticleSystem.m_flStartTime = GetOffset("DT_ParticleSystem", "m_flStartTime");
	DT_ParticleSystem.m_szSnapshotFileName = GetOffset("DT_ParticleSystem", "m_szSnapshotFileName");
	DT_ParticleSystem.m_vServerControlPoints = GetOffset("DT_ParticleSystem", "m_vServerControlPoints");
	DT_ParticleSystem.m_iServerControlPointAssignments = GetOffset("DT_ParticleSystem", "m_iServerControlPointAssignments");
	DT_ParticleSystem.m_hControlPointEnts = GetOffset("DT_ParticleSystem", "m_hControlPointEnts");
	DT_ParticleSystem.m_iControlPointParents = GetOffset("DT_ParticleSystem", "m_iControlPointParents");
	DT_MovieDisplay.m_bEnabled = GetOffset("DT_MovieDisplay", "m_bEnabled");
	DT_MovieDisplay.m_bLooping = GetOffset("DT_MovieDisplay", "m_bLooping");
	DT_MovieDisplay.m_szMovieFilename = GetOffset("DT_MovieDisplay", "m_szMovieFilename");
	DT_MovieDisplay.m_szGroupName = GetOffset("DT_MovieDisplay", "m_szGroupName");
	DT_MovieDisplay.m_bStretchToFill = GetOffset("DT_MovieDisplay", "m_bStretchToFill");
	DT_MovieDisplay.m_bForcedSlave = GetOffset("DT_MovieDisplay", "m_bForcedSlave");
	DT_MovieDisplay.m_bUseCustomUVs = GetOffset("DT_MovieDisplay", "m_bUseCustomUVs");
	DT_MovieDisplay.m_flUMin = GetOffset("DT_MovieDisplay", "m_flUMin");
	DT_MovieDisplay.m_flUMax = GetOffset("DT_MovieDisplay", "m_flUMax");
	DT_MovieDisplay.m_flVMin = GetOffset("DT_MovieDisplay", "m_flVMin");
	DT_MovieDisplay.m_flVMax = GetOffset("DT_MovieDisplay", "m_flVMax");
	DT_MaterialModifyControl.m_szMaterialName = GetOffset("DT_MaterialModifyControl", "m_szMaterialName");
	DT_MaterialModifyControl.m_szMaterialVar = GetOffset("DT_MaterialModifyControl", "m_szMaterialVar");
	DT_MaterialModifyControl.m_szMaterialVarValue = GetOffset("DT_MaterialModifyControl", "m_szMaterialVarValue");
	DT_MaterialModifyControl.m_iFrameStart = GetOffset("DT_MaterialModifyControl", "m_iFrameStart");
	DT_MaterialModifyControl.m_iFrameEnd = GetOffset("DT_MaterialModifyControl", "m_iFrameEnd");
	DT_MaterialModifyControl.m_bWrap = GetOffset("DT_MaterialModifyControl", "m_bWrap");
	DT_MaterialModifyControl.m_flFramerate = GetOffset("DT_MaterialModifyControl", "m_flFramerate");
	DT_MaterialModifyControl.m_bNewAnimCommandsSemaphore = GetOffset("DT_MaterialModifyControl", "m_bNewAnimCommandsSemaphore");
	DT_MaterialModifyControl.m_flFloatLerpStartValue = GetOffset("DT_MaterialModifyControl", "m_flFloatLerpStartValue");
	DT_MaterialModifyControl.m_flFloatLerpEndValue = GetOffset("DT_MaterialModifyControl", "m_flFloatLerpEndValue");
	DT_MaterialModifyControl.m_flFloatLerpTransitionTime = GetOffset("DT_MaterialModifyControl", "m_flFloatLerpTransitionTime");
	DT_MaterialModifyControl.m_bFloatLerpWrap = GetOffset("DT_MaterialModifyControl", "m_bFloatLerpWrap");
	DT_MaterialModifyControl.m_nModifyMode = GetOffset("DT_MaterialModifyControl", "m_nModifyMode");
	DT_LightGlow.m_clrRender = GetOffset("DT_LightGlow", "m_clrRender");
	DT_LightGlow.m_nHorizontalSize = GetOffset("DT_LightGlow", "m_nHorizontalSize");
	DT_LightGlow.m_nVerticalSize = GetOffset("DT_LightGlow", "m_nVerticalSize");
	DT_LightGlow.m_nMinDist = GetOffset("DT_LightGlow", "m_nMinDist");
	DT_LightGlow.m_nMaxDist = GetOffset("DT_LightGlow", "m_nMaxDist");
	DT_LightGlow.m_nOuterMaxDist = GetOffset("DT_LightGlow", "m_nOuterMaxDist");
	DT_LightGlow.m_spawnflags = GetOffset("DT_LightGlow", "m_spawnflags");
	DT_LightGlow.m_vecOrigin = GetOffset("DT_LightGlow", "m_vecOrigin");
	DT_LightGlow.m_angRotation = GetOffset("DT_LightGlow", "m_angRotation");
	DT_LightGlow.moveparent = GetOffset("DT_LightGlow", "moveparent");
	DT_LightGlow.m_flGlowProxySize = GetOffset("DT_LightGlow", "m_flGlowProxySize");
	DT_LightGlow.HDRColorScale = GetOffset("DT_LightGlow", "HDRColorScale");
	DT_ItemAssaultSuitUseable.m_nArmorValue = GetOffset("DT_ItemAssaultSuitUseable", "m_nArmorValue");
	DT_ItemAssaultSuitUseable.m_bIsHeavyAssaultSuit = GetOffset("DT_ItemAssaultSuitUseable", "m_bIsHeavyAssaultSuit");
	DT_Item.m_bShouldGlow = GetOffset("DT_Item", "m_bShouldGlow");
	DT_InfoOverlayAccessor.m_iTextureFrameIndex = GetOffset("DT_InfoOverlayAccessor", "m_iTextureFrameIndex");
	DT_InfoOverlayAccessor.m_iOverlayID = GetOffset("DT_InfoOverlayAccessor", "m_iOverlayID");
	DT_FuncSmokeVolume.m_Color1 = GetOffset("DT_FuncSmokeVolume", "m_Color1");
	DT_FuncSmokeVolume.m_Color2 = GetOffset("DT_FuncSmokeVolume", "m_Color2");
	DT_FuncSmokeVolume.m_MaterialName = GetOffset("DT_FuncSmokeVolume", "m_MaterialName");
	DT_FuncSmokeVolume.m_ParticleDrawWidth = GetOffset("DT_FuncSmokeVolume", "m_ParticleDrawWidth");
	DT_FuncSmokeVolume.m_ParticleSpacingDistance = GetOffset("DT_FuncSmokeVolume", "m_ParticleSpacingDistance");
	DT_FuncSmokeVolume.m_DensityRampSpeed = GetOffset("DT_FuncSmokeVolume", "m_DensityRampSpeed");
	DT_FuncSmokeVolume.m_RotationSpeed = GetOffset("DT_FuncSmokeVolume", "m_RotationSpeed");
	DT_FuncSmokeVolume.m_MovementSpeed = GetOffset("DT_FuncSmokeVolume", "m_MovementSpeed");
	DT_FuncSmokeVolume.m_Density = GetOffset("DT_FuncSmokeVolume", "m_Density");
	DT_FuncSmokeVolume.m_maxDrawDistance = GetOffset("DT_FuncSmokeVolume", "m_maxDrawDistance");
	DT_FuncSmokeVolume.m_spawnflags = GetOffset("DT_FuncSmokeVolume", "m_spawnflags");
	DT_FuncSmokeVolume.m_Collision = GetOffset("DT_FuncSmokeVolume", "m_Collision");
	DT_FuncRotating.m_vecOrigin = GetOffset("DT_FuncRotating", "m_vecOrigin");
	DT_FuncRotating.m_angRotation = GetOffset("DT_FuncRotating", "m_angRotation[0]");
	DT_FuncRotating.m_flSimulationTime = GetOffset("DT_FuncRotating", "m_flSimulationTime");
	DT_FuncOccluder.m_bActive = GetOffset("DT_FuncOccluder", "m_bActive");
	DT_FuncOccluder.m_nOccluderIndex = GetOffset("DT_FuncOccluder", "m_nOccluderIndex");
	DT_FuncMoveLinear.m_vecVelocity = GetOffset("DT_FuncMoveLinear", "m_vecVelocity");
	DT_FuncMoveLinear.m_fFlags = GetOffset("DT_FuncMoveLinear", "m_fFlags");
	DT_Func_LOD.m_nDisappearMinDist = GetOffset("DT_Func_LOD", "m_nDisappearMinDist");
	DT_Func_LOD.m_nDisappearMaxDist = GetOffset("DT_Func_LOD", "m_nDisappearMaxDist");
	DT_TEDust.m_flSize = GetOffset("DT_TEDust", "m_flSize");
	DT_TEDust.m_flSpeed = GetOffset("DT_TEDust", "m_flSpeed");
	DT_TEDust.m_vecDirection = GetOffset("DT_TEDust", "m_vecDirection");
	DT_Func_Dust.m_Color = GetOffset("DT_Func_Dust", "m_Color");
	DT_Func_Dust.m_SpawnRate = GetOffset("DT_Func_Dust", "m_SpawnRate");
	DT_Func_Dust.m_flSizeMin = GetOffset("DT_Func_Dust", "m_flSizeMin");
	DT_Func_Dust.m_flSizeMax = GetOffset("DT_Func_Dust", "m_flSizeMax");
	DT_Func_Dust.m_LifetimeMin = GetOffset("DT_Func_Dust", "m_LifetimeMin");
	DT_Func_Dust.m_LifetimeMax = GetOffset("DT_Func_Dust", "m_LifetimeMax");
	DT_Func_Dust.m_DustFlags = GetOffset("DT_Func_Dust", "m_DustFlags");
	DT_Func_Dust.m_SpeedMax = GetOffset("DT_Func_Dust", "m_SpeedMax");
	DT_Func_Dust.m_DistMax = GetOffset("DT_Func_Dust", "m_DistMax");
	DT_Func_Dust.m_nModelIndex = GetOffset("DT_Func_Dust", "m_nModelIndex");
	DT_Func_Dust.m_FallSpeed = GetOffset("DT_Func_Dust", "m_FallSpeed");
	DT_Func_Dust.m_bAffectedByWind = GetOffset("DT_Func_Dust", "m_bAffectedByWind");
	DT_Func_Dust.m_Collision = GetOffset("DT_Func_Dust", "m_Collision");
	DT_FuncConveyor.m_flConveyorSpeed = GetOffset("DT_FuncConveyor", "m_flConveyorSpeed");
	DT_BreakableSurface.m_nNumWide = GetOffset("DT_BreakableSurface", "m_nNumWide");
	DT_BreakableSurface.m_nNumHigh = GetOffset("DT_BreakableSurface", "m_nNumHigh");
	DT_BreakableSurface.m_flPanelWidth = GetOffset("DT_BreakableSurface", "m_flPanelWidth");
	DT_BreakableSurface.m_flPanelHeight = GetOffset("DT_BreakableSurface", "m_flPanelHeight");
	DT_BreakableSurface.m_vNormal = GetOffset("DT_BreakableSurface", "m_vNormal");
	DT_BreakableSurface.m_vCorner = GetOffset("DT_BreakableSurface", "m_vCorner");
	DT_BreakableSurface.m_bIsBroken = GetOffset("DT_BreakableSurface", "m_bIsBroken");
	DT_BreakableSurface.m_nSurfaceType = GetOffset("DT_BreakableSurface", "m_nSurfaceType");
	DT_BreakableSurface.m_RawPanelBitVec = GetOffset("DT_BreakableSurface", "m_RawPanelBitVec");
	DT_FuncAreaPortalWindow.m_flFadeStartDist = GetOffset("DT_FuncAreaPortalWindow", "m_flFadeStartDist");
	DT_FuncAreaPortalWindow.m_flFadeDist = GetOffset("DT_FuncAreaPortalWindow", "m_flFadeDist");
	DT_FuncAreaPortalWindow.m_flTranslucencyLimit = GetOffset("DT_FuncAreaPortalWindow", "m_flTranslucencyLimit");
	DT_FuncAreaPortalWindow.m_iBackgroundModelIndex = GetOffset("DT_FuncAreaPortalWindow", "m_iBackgroundModelIndex");
	DT_CFish.m_poolOrigin = GetOffset("DT_CFish", "m_poolOrigin");
	DT_CFish.m_x = GetOffset("DT_CFish", "m_x");
	DT_CFish.m_y = GetOffset("DT_CFish", "m_y");
	DT_CFish.m_z = GetOffset("DT_CFish", "m_z");
	DT_CFish.m_angle = GetOffset("DT_CFish", "m_angle");
	DT_CFish.m_nModelIndex = GetOffset("DT_CFish", "m_nModelIndex");
	DT_CFish.m_lifeState = GetOffset("DT_CFish", "m_lifeState");
	DT_CFish.m_waterLevel = GetOffset("DT_CFish", "m_waterLevel");
	DT_FireSmoke.m_flStartScale = GetOffset("DT_FireSmoke", "m_flStartScale");
	DT_FireSmoke.m_flScale = GetOffset("DT_FireSmoke", "m_flScale");
	DT_FireSmoke.m_flScaleTime = GetOffset("DT_FireSmoke", "m_flScaleTime");
	DT_FireSmoke.m_nFlags = GetOffset("DT_FireSmoke", "m_nFlags");
	DT_FireSmoke.m_nFlameModelIndex = GetOffset("DT_FireSmoke", "m_nFlameModelIndex");
	DT_FireSmoke.m_nFlameFromAboveModelIndex = GetOffset("DT_FireSmoke", "m_nFlameFromAboveModelIndex");
	DT_EnvTonemapController.m_bUseCustomAutoExposureMin = GetOffset("DT_EnvTonemapController", "m_bUseCustomAutoExposureMin");
	DT_EnvTonemapController.m_bUseCustomAutoExposureMax = GetOffset("DT_EnvTonemapController", "m_bUseCustomAutoExposureMax");
	DT_EnvTonemapController.m_bUseCustomBloomScale = GetOffset("DT_EnvTonemapController", "m_bUseCustomBloomScale");
	DT_EnvTonemapController.m_flCustomAutoExposureMin = GetOffset("DT_EnvTonemapController", "m_flCustomAutoExposureMin");
	DT_EnvTonemapController.m_flCustomAutoExposureMax = GetOffset("DT_EnvTonemapController", "m_flCustomAutoExposureMax");
	DT_EnvTonemapController.m_flCustomBloomScale = GetOffset("DT_EnvTonemapController", "m_flCustomBloomScale");
	DT_EnvTonemapController.m_flCustomBloomScaleMinimum = GetOffset("DT_EnvTonemapController", "m_flCustomBloomScaleMinimum");
	DT_EnvTonemapController.m_flBloomExponent = GetOffset("DT_EnvTonemapController", "m_flBloomExponent");
	DT_EnvTonemapController.m_flBloomSaturation = GetOffset("DT_EnvTonemapController", "m_flBloomSaturation");
	DT_EnvTonemapController.m_flTonemapPercentTarget = GetOffset("DT_EnvTonemapController", "m_flTonemapPercentTarget");
	DT_EnvTonemapController.m_flTonemapPercentBrightPixels = GetOffset("DT_EnvTonemapController", "m_flTonemapPercentBrightPixels");
	DT_EnvTonemapController.m_flTonemapMinAvgLum = GetOffset("DT_EnvTonemapController", "m_flTonemapMinAvgLum");
	DT_EnvTonemapController.m_flTonemapRate = GetOffset("DT_EnvTonemapController", "m_flTonemapRate");
	DT_EnvScreenEffect.m_flDuration = GetOffset("DT_EnvScreenEffect", "m_flDuration");
	DT_EnvScreenEffect.m_nType = GetOffset("DT_EnvScreenEffect", "m_nType");
	DT_EnvScreenOverlay.m_iszOverlayNames = GetOffset("DT_EnvScreenOverlay", "m_iszOverlayNames[0]");
	DT_EnvScreenOverlay.m_flOverlayTimes = GetOffset("DT_EnvScreenOverlay", "m_flOverlayTimes[0]");
	DT_EnvScreenOverlay.m_flStartTime = GetOffset("DT_EnvScreenOverlay", "m_flStartTime");
	DT_EnvScreenOverlay.m_iDesiredOverlay = GetOffset("DT_EnvScreenOverlay", "m_iDesiredOverlay");
	DT_EnvScreenOverlay.m_bIsActive = GetOffset("DT_EnvScreenOverlay", "m_bIsActive");
	DT_EnvProjectedTexture.m_hTargetEntity = GetOffset("DT_EnvProjectedTexture", "m_hTargetEntity");
	DT_EnvProjectedTexture.m_bState = GetOffset("DT_EnvProjectedTexture", "m_bState");
	DT_EnvProjectedTexture.m_bAlwaysUpdate = GetOffset("DT_EnvProjectedTexture", "m_bAlwaysUpdate");
	DT_EnvProjectedTexture.m_flLightFOV = GetOffset("DT_EnvProjectedTexture", "m_flLightFOV");
	DT_EnvProjectedTexture.m_bEnableShadows = GetOffset("DT_EnvProjectedTexture", "m_bEnableShadows");
	DT_EnvProjectedTexture.m_bSimpleProjection = GetOffset("DT_EnvProjectedTexture", "m_bSimpleProjection");
	DT_EnvProjectedTexture.m_bLightOnlyTarget = GetOffset("DT_EnvProjectedTexture", "m_bLightOnlyTarget");
	DT_EnvProjectedTexture.m_bLightWorld = GetOffset("DT_EnvProjectedTexture", "m_bLightWorld");
	DT_EnvProjectedTexture.m_bCameraSpace = GetOffset("DT_EnvProjectedTexture", "m_bCameraSpace");
	DT_EnvProjectedTexture.m_flBrightnessScale = GetOffset("DT_EnvProjectedTexture", "m_flBrightnessScale");
	DT_EnvProjectedTexture.m_LightColor = GetOffset("DT_EnvProjectedTexture", "m_LightColor");
	DT_EnvProjectedTexture.m_flColorTransitionTime = GetOffset("DT_EnvProjectedTexture", "m_flColorTransitionTime");
	DT_EnvProjectedTexture.m_flAmbient = GetOffset("DT_EnvProjectedTexture", "m_flAmbient");
	DT_EnvProjectedTexture.m_SpotlightTextureName = GetOffset("DT_EnvProjectedTexture", "m_SpotlightTextureName");
	DT_EnvProjectedTexture.m_nSpotlightTextureFrame = GetOffset("DT_EnvProjectedTexture", "m_nSpotlightTextureFrame");
	DT_EnvProjectedTexture.m_flNearZ = GetOffset("DT_EnvProjectedTexture", "m_flNearZ");
	DT_EnvProjectedTexture.m_flFarZ = GetOffset("DT_EnvProjectedTexture", "m_flFarZ");
	DT_EnvProjectedTexture.m_nShadowQuality = GetOffset("DT_EnvProjectedTexture", "m_nShadowQuality");
	DT_EnvProjectedTexture.m_flProjectionSize = GetOffset("DT_EnvProjectedTexture", "m_flProjectionSize");
	DT_EnvProjectedTexture.m_flRotation = GetOffset("DT_EnvProjectedTexture", "m_flRotation");
	DT_EnvProjectedTexture.m_iStyle = GetOffset("DT_EnvProjectedTexture", "m_iStyle");
	DT_EnvParticleScript.m_flSequenceScale = GetOffset("DT_EnvParticleScript", "m_flSequenceScale");
	DT_FogController.m_fog_enable = GetOffset("DT_FogController", "m_fog.enable");
	DT_FogController.m_fog_blend = GetOffset("DT_FogController", "m_fog.blend");
	DT_FogController.m_fog_dirPrimary = GetOffset("DT_FogController", "m_fog.dirPrimary");
	DT_FogController.m_fog_colorPrimary = GetOffset("DT_FogController", "m_fog.colorPrimary");
	DT_FogController.m_fog_colorSecondary = GetOffset("DT_FogController", "m_fog.colorSecondary");
	DT_FogController.m_fog_start = GetOffset("DT_FogController", "m_fog.start");
	DT_FogController.m_fog_end = GetOffset("DT_FogController", "m_fog.end");
	DT_FogController.m_fog_farz = GetOffset("DT_FogController", "m_fog.farz");
	DT_FogController.m_fog_maxdensity = GetOffset("DT_FogController", "m_fog.maxdensity");
	DT_FogController.m_fog_colorPrimaryLerpTo = GetOffset("DT_FogController", "m_fog.colorPrimaryLerpTo");
	DT_FogController.m_fog_colorSecondaryLerpTo = GetOffset("DT_FogController", "m_fog.colorSecondaryLerpTo");
	DT_FogController.m_fog_startLerpTo = GetOffset("DT_FogController", "m_fog.startLerpTo");
	DT_FogController.m_fog_endLerpTo = GetOffset("DT_FogController", "m_fog.endLerpTo");
	DT_FogController.m_fog_maxdensityLerpTo = GetOffset("DT_FogController", "m_fog.maxdensityLerpTo");
	DT_FogController.m_fog_lerptime = GetOffset("DT_FogController", "m_fog.lerptime");
	DT_FogController.m_fog_duration = GetOffset("DT_FogController", "m_fog.duration");
	DT_FogController.m_fog_HDRColorScale = GetOffset("DT_FogController", "m_fog.HDRColorScale");
	DT_FogController.m_fog_ZoomFogScale = GetOffset("DT_FogController", "m_fog.ZoomFogScale");
	DT_EnvDOFController.m_bDOFEnabled = GetOffset("DT_EnvDOFController", "m_bDOFEnabled");
	DT_EnvDOFController.m_flNearBlurDepth = GetOffset("DT_EnvDOFController", "m_flNearBlurDepth");
	DT_EnvDOFController.m_flNearFocusDepth = GetOffset("DT_EnvDOFController", "m_flNearFocusDepth");
	DT_EnvDOFController.m_flFarFocusDepth = GetOffset("DT_EnvDOFController", "m_flFarFocusDepth");
	DT_EnvDOFController.m_flFarBlurDepth = GetOffset("DT_EnvDOFController", "m_flFarBlurDepth");
	DT_EnvDOFController.m_flNearBlurRadius = GetOffset("DT_EnvDOFController", "m_flNearBlurRadius");
	DT_EnvDOFController.m_flFarBlurRadius = GetOffset("DT_EnvDOFController", "m_flFarBlurRadius");
	DT_CascadeLight.m_shadowDirection = GetOffset("DT_CascadeLight", "m_shadowDirection");
	DT_CascadeLight.m_envLightShadowDirection = GetOffset("DT_CascadeLight", "m_envLightShadowDirection");
	DT_CascadeLight.m_bEnabled = GetOffset("DT_CascadeLight", "m_bEnabled");
	DT_CascadeLight.m_bUseLightEnvAngles = GetOffset("DT_CascadeLight", "m_bUseLightEnvAngles");
	DT_CascadeLight.m_LightColor = GetOffset("DT_CascadeLight", "m_LightColor");
	DT_CascadeLight.m_LightColorScale = GetOffset("DT_CascadeLight", "m_LightColorScale");
	DT_CascadeLight.m_flMaxShadowDist = GetOffset("DT_CascadeLight", "m_flMaxShadowDist");
	DT_EnvAmbientLight.m_vecColor = GetOffset("DT_EnvAmbientLight", "m_vecColor");
	DT_EntityParticleTrail.m_iMaterialName = GetOffset("DT_EntityParticleTrail", "m_iMaterialName");
	DT_EntityParticleTrail.m_Info = GetOffset("DT_EntityParticleTrail", "m_Info");
	DT_EntityParticleTrail.m_hConstraintEntity = GetOffset("DT_EntityParticleTrail", "m_hConstraintEntity");
	DT_EntityFreezing.m_vFreezingOrigin = GetOffset("DT_EntityFreezing", "m_vFreezingOrigin");
	DT_EntityFreezing.m_flFrozenPerHitbox = GetOffset("DT_EntityFreezing", "m_flFrozenPerHitbox");
	DT_EntityFreezing.m_flFrozen = GetOffset("DT_EntityFreezing", "m_flFrozen");
	DT_EntityFreezing.m_bFinishFreezing = GetOffset("DT_EntityFreezing", "m_bFinishFreezing");
	DT_EntityFlame.m_hEntAttached = GetOffset("DT_EntityFlame", "m_hEntAttached");
	DT_EntityFlame.m_bCheapEffect = GetOffset("DT_EntityFlame", "m_bCheapEffect");
	DT_EntityDissolve.m_flStartTime = GetOffset("DT_EntityDissolve", "m_flStartTime");
	DT_EntityDissolve.m_flFadeOutStart = GetOffset("DT_EntityDissolve", "m_flFadeOutStart");
	DT_EntityDissolve.m_flFadeOutLength = GetOffset("DT_EntityDissolve", "m_flFadeOutLength");
	DT_EntityDissolve.m_flFadeOutModelStart = GetOffset("DT_EntityDissolve", "m_flFadeOutModelStart");
	DT_EntityDissolve.m_flFadeOutModelLength = GetOffset("DT_EntityDissolve", "m_flFadeOutModelLength");
	DT_EntityDissolve.m_flFadeInStart = GetOffset("DT_EntityDissolve", "m_flFadeInStart");
	DT_EntityDissolve.m_flFadeInLength = GetOffset("DT_EntityDissolve", "m_flFadeInLength");
	DT_EntityDissolve.m_nDissolveType = GetOffset("DT_EntityDissolve", "m_nDissolveType");
	DT_EntityDissolve.m_vDissolverOrigin = GetOffset("DT_EntityDissolve", "m_vDissolverOrigin");
	DT_EntityDissolve.m_nMagnitude = GetOffset("DT_EntityDissolve", "m_nMagnitude");
	DT_DynamicLight.m_Flags = GetOffset("DT_DynamicLight", "m_Flags");
	DT_DynamicLight.m_LightStyle = GetOffset("DT_DynamicLight", "m_LightStyle");
	DT_DynamicLight.m_Radius = GetOffset("DT_DynamicLight", "m_Radius");
	DT_DynamicLight.m_Exponent = GetOffset("DT_DynamicLight", "m_Exponent");
	DT_DynamicLight.m_InnerAngle = GetOffset("DT_DynamicLight", "m_InnerAngle");
	DT_DynamicLight.m_OuterAngle = GetOffset("DT_DynamicLight", "m_OuterAngle");
	DT_DynamicLight.m_SpotRadius = GetOffset("DT_DynamicLight", "m_SpotRadius");
	DT_ColorCorrectionVolume.m_bEnabled = GetOffset("DT_ColorCorrectionVolume", "m_bEnabled");
	DT_ColorCorrectionVolume.m_MaxWeight = GetOffset("DT_ColorCorrectionVolume", "m_MaxWeight");
	DT_ColorCorrectionVolume.m_FadeDuration = GetOffset("DT_ColorCorrectionVolume", "m_FadeDuration");
	DT_ColorCorrectionVolume.m_Weight = GetOffset("DT_ColorCorrectionVolume", "m_Weight");
	DT_ColorCorrectionVolume.m_lookupFilename = GetOffset("DT_ColorCorrectionVolume", "m_lookupFilename");
	DT_ColorCorrection.m_vecOrigin = GetOffset("DT_ColorCorrection", "m_vecOrigin");
	DT_ColorCorrection.m_minFalloff = GetOffset("DT_ColorCorrection", "m_minFalloff");
	DT_ColorCorrection.m_maxFalloff = GetOffset("DT_ColorCorrection", "m_maxFalloff");
	DT_ColorCorrection.m_flCurWeight = GetOffset("DT_ColorCorrection", "m_flCurWeight");
	DT_ColorCorrection.m_flMaxWeight = GetOffset("DT_ColorCorrection", "m_flMaxWeight");
	DT_ColorCorrection.m_flFadeInDuration = GetOffset("DT_ColorCorrection", "m_flFadeInDuration");
	DT_ColorCorrection.m_flFadeOutDuration = GetOffset("DT_ColorCorrection", "m_flFadeOutDuration");
	DT_ColorCorrection.m_netLookupFilename = GetOffset("DT_ColorCorrection", "m_netLookupFilename");
	DT_ColorCorrection.m_bEnabled = GetOffset("DT_ColorCorrection", "m_bEnabled");
	DT_ColorCorrection.m_bMaster = GetOffset("DT_ColorCorrection", "m_bMaster");
	DT_ColorCorrection.m_bClientSide = GetOffset("DT_ColorCorrection", "m_bClientSide");
	DT_ColorCorrection.m_bExclusive = GetOffset("DT_ColorCorrection", "m_bExclusive");
	DT_BreakableProp.m_qPreferredPlayerCarryAngles = GetOffset("DT_BreakableProp", "m_qPreferredPlayerCarryAngles");
	DT_BreakableProp.m_bClientPhysics = GetOffset("DT_BreakableProp", "m_bClientPhysics");
	DT_BeamSpotlight.m_nHaloIndex = GetOffset("DT_BeamSpotlight", "m_nHaloIndex");
	DT_BeamSpotlight.m_bSpotlightOn = GetOffset("DT_BeamSpotlight", "m_bSpotlightOn");
	DT_BeamSpotlight.m_bHasDynamicLight = GetOffset("DT_BeamSpotlight", "m_bHasDynamicLight");
	DT_BeamSpotlight.m_flSpotlightMaxLength = GetOffset("DT_BeamSpotlight", "m_flSpotlightMaxLength");
	DT_BeamSpotlight.m_flSpotlightGoalWidth = GetOffset("DT_BeamSpotlight", "m_flSpotlightGoalWidth");
	DT_BeamSpotlight.m_flHDRColorScale = GetOffset("DT_BeamSpotlight", "m_flHDRColorScale");
	DT_BeamSpotlight.m_nRotationAxis = GetOffset("DT_BeamSpotlight", "m_nRotationAxis");
	DT_BeamSpotlight.m_flRotationSpeed = GetOffset("DT_BeamSpotlight", "m_flRotationSpeed");
	DT_BaseButton.m_usable = GetOffset("DT_BaseButton", "m_usable");
	DT_BaseToggle.m_vecFinalDest = GetOffset("DT_BaseToggle", "m_vecFinalDest");
	DT_BaseToggle.m_movementType = GetOffset("DT_BaseToggle", "m_movementType");
	DT_BaseToggle.m_flMoveTargetTime = GetOffset("DT_BaseToggle", "m_flMoveTargetTime");
	DT_BasePlayer.localdata = GetOffset("DT_BasePlayer", "localdata");
	DT_BasePlayer.pl = GetOffset("DT_BasePlayer", "pl");
	DT_BasePlayer.m_iFOV = GetOffset("DT_BasePlayer", "m_iFOV");
	DT_BasePlayer.m_iFOVStart = GetOffset("DT_BasePlayer", "m_iFOVStart");
	DT_BasePlayer.m_flFOVTime = GetOffset("DT_BasePlayer", "m_flFOVTime");
	DT_BasePlayer.m_iDefaultFOV = GetOffset("DT_BasePlayer", "m_iDefaultFOV");
	DT_BasePlayer.m_hZoomOwner = GetOffset("DT_BasePlayer", "m_hZoomOwner");
	DT_BasePlayer.m_afPhysicsFlags = GetOffset("DT_BasePlayer", "m_afPhysicsFlags");
	DT_BasePlayer.m_hVehicle = GetOffset("DT_BasePlayer", "m_hVehicle");
	DT_BasePlayer.m_hUseEntity = GetOffset("DT_BasePlayer", "m_hUseEntity");
	DT_BasePlayer.m_hGroundEntity = GetOffset("DT_BasePlayer", "m_hGroundEntity");
	DT_BasePlayer.m_iHealth = GetOffset("DT_BasePlayer", "m_iHealth");
	DT_BasePlayer.m_lifeState = GetOffset("DT_BasePlayer", "m_lifeState");
	DT_BasePlayer.m_iAmmo = GetOffset("DT_BasePlayer", "m_iAmmo");
	DT_BasePlayer.m_iBonusProgress = GetOffset("DT_BasePlayer", "m_iBonusProgress");
	DT_BasePlayer.m_iBonusChallenge = GetOffset("DT_BasePlayer", "m_iBonusChallenge");
	DT_BasePlayer.m_flMaxspeed = GetOffset("DT_BasePlayer", "m_flMaxspeed");
	DT_BasePlayer.m_fFlags = GetOffset("DT_BasePlayer", "m_fFlags");
	DT_BasePlayer.m_iObserverMode = GetOffset("DT_BasePlayer", "m_iObserverMode");
	DT_BasePlayer.m_bActiveCameraMan = GetOffset("DT_BasePlayer", "m_bActiveCameraMan");
	DT_BasePlayer.m_bCameraManXRay = GetOffset("DT_BasePlayer", "m_bCameraManXRay");
	DT_BasePlayer.m_bCameraManOverview = GetOffset("DT_BasePlayer", "m_bCameraManOverview");
	DT_BasePlayer.m_bCameraManScoreBoard = GetOffset("DT_BasePlayer", "m_bCameraManScoreBoard");
	DT_BasePlayer.m_uCameraManGraphs = GetOffset("DT_BasePlayer", "m_uCameraManGraphs");
	DT_BasePlayer.m_iDeathPostEffect = GetOffset("DT_BasePlayer", "m_iDeathPostEffect");
	DT_BasePlayer.m_hObserverTarget = GetOffset("DT_BasePlayer", "m_hObserverTarget");
	DT_BasePlayer.m_hViewModel = GetOffset("DT_BasePlayer", "m_hViewModel[0]");
	DT_BasePlayer.m_iCoachingTeam = GetOffset("DT_BasePlayer", "m_iCoachingTeam");
	DT_BasePlayer.m_szLastPlaceName = GetOffset("DT_BasePlayer", "m_szLastPlaceName");
	DT_BasePlayer.m_vecLadderNormal = GetOffset("DT_BasePlayer", "m_vecLadderNormal");
	DT_BasePlayer.m_ladderSurfaceProps = GetOffset("DT_BasePlayer", "m_ladderSurfaceProps");
	DT_BasePlayer.m_ubEFNoInterpParity = GetOffset("DT_BasePlayer", "m_ubEFNoInterpParity");
	DT_BasePlayer.m_hPostProcessCtrl = GetOffset("DT_BasePlayer", "m_hPostProcessCtrl");
	DT_BasePlayer.m_hColorCorrectionCtrl = GetOffset("DT_BasePlayer", "m_hColorCorrectionCtrl");
	DT_BasePlayer.m_PlayerFog_m_hCtrl = GetOffset("DT_BasePlayer", "m_PlayerFog.m_hCtrl");
	DT_BasePlayer.m_vphysicsCollisionState = GetOffset("DT_BasePlayer", "m_vphysicsCollisionState");
	DT_BasePlayer.m_hViewEntity = GetOffset("DT_BasePlayer", "m_hViewEntity");
	DT_BasePlayer.m_bShouldDrawPlayerWhileUsingViewEntity = GetOffset("DT_BasePlayer", "m_bShouldDrawPlayerWhileUsingViewEntity");
	DT_BasePlayer.m_vecViewOffset = GetOffset("DT_BasePlayer", "m_vecViewOffset[0]");
	DT_BasePlayer.m_flDuckAmount = GetOffset("DT_BasePlayer", "m_flDuckAmount");
	DT_BasePlayer.m_flDuckSpeed = GetOffset("DT_BasePlayer", "m_flDuckSpeed");
	DT_BasePlayer.m_nWaterLevel = GetOffset("DT_BasePlayer", "m_nWaterLevel");
	DT_BaseFlex.m_flexWeight = GetOffset("DT_BaseFlex", "m_flexWeight");
	DT_BaseFlex.m_blinktoggle = GetOffset("DT_BaseFlex", "m_blinktoggle");
	DT_BaseFlex.m_viewtarget = GetOffset("DT_BaseFlex", "m_viewtarget");
	DT_BaseEntity.AnimTimeMustBeFirst = GetOffset("DT_BaseEntity", "AnimTimeMustBeFirst");
	DT_BaseEntity.m_flSimulationTime = GetOffset("DT_BaseEntity", "m_flSimulationTime");
	DT_BaseEntity.m_cellbits = GetOffset("DT_BaseEntity", "m_cellbits");
	DT_BaseEntity.m_cellX = GetOffset("DT_BaseEntity", "m_cellX");
	DT_BaseEntity.m_cellY = GetOffset("DT_BaseEntity", "m_cellY");
	DT_BaseEntity.m_cellZ = GetOffset("DT_BaseEntity", "m_cellZ");
	DT_BaseEntity.m_vecOrigin = GetOffset("DT_BaseEntity", "m_vecOrigin");
	DT_BaseEntity.m_angRotation = GetOffset("DT_BaseEntity", "m_angRotation");
	DT_BaseEntity.m_nModelIndex = GetOffset("DT_BaseEntity", "m_nModelIndex");
	DT_BaseEntity.m_fEffects = GetOffset("DT_BaseEntity", "m_fEffects");
	DT_BaseEntity.m_nRenderMode = GetOffset("DT_BaseEntity", "m_nRenderMode");
	DT_BaseEntity.m_nRenderFX = GetOffset("DT_BaseEntity", "m_nRenderFX");
	DT_BaseEntity.m_clrRender = GetOffset("DT_BaseEntity", "m_clrRender");
	DT_BaseEntity.m_iTeamNum = GetOffset("DT_BaseEntity", "m_iTeamNum");
	DT_BaseEntity.m_iPendingTeamNum = GetOffset("DT_BaseEntity", "m_iPendingTeamNum");
	DT_BaseEntity.m_CollisionGroup = GetOffset("DT_BaseEntity", "m_CollisionGroup");
	DT_BaseEntity.m_flElasticity = GetOffset("DT_BaseEntity", "m_flElasticity");
	DT_BaseEntity.m_flShadowCastDistance = GetOffset("DT_BaseEntity", "m_flShadowCastDistance");
	DT_BaseEntity.m_hOwnerEntity = GetOffset("DT_BaseEntity", "m_hOwnerEntity");
	DT_BaseEntity.m_hEffectEntity = GetOffset("DT_BaseEntity", "m_hEffectEntity");
	DT_BaseEntity.moveparent = GetOffset("DT_BaseEntity", "moveparent");
	DT_BaseEntity.m_iParentAttachment = GetOffset("DT_BaseEntity", "m_iParentAttachment");
	DT_BaseEntity.m_iName = GetOffset("DT_BaseEntity", "m_iName");
	DT_BaseEntity.movetype = GetOffset("DT_BaseEntity", "movetype");
	DT_BaseEntity.movecollide = GetOffset("DT_BaseEntity", "movecollide");
	DT_BaseEntity.m_Collision = GetOffset("DT_BaseEntity", "m_Collision");
	DT_BaseEntity.m_iTextureFrameIndex = GetOffset("DT_BaseEntity", "m_iTextureFrameIndex");
	DT_BaseEntity.m_bSimulatedEveryTick = GetOffset("DT_BaseEntity", "m_bSimulatedEveryTick");
	DT_BaseEntity.m_bAnimatedEveryTick = GetOffset("DT_BaseEntity", "m_bAnimatedEveryTick");
	DT_BaseEntity.m_bAlternateSorting = GetOffset("DT_BaseEntity", "m_bAlternateSorting");
	DT_BaseEntity.m_bSpotted = GetOffset("DT_BaseEntity", "m_bSpotted");
	DT_BaseEntity.m_bSpottedBy = GetOffset("DT_BaseEntity", "m_bSpottedBy");
	DT_BaseEntity.m_bSpottedByMask = GetOffset("DT_BaseEntity", "m_bSpottedByMask");
	DT_BaseEntity.m_bIsAutoaimTarget = GetOffset("DT_BaseEntity", "m_bIsAutoaimTarget");
	DT_BaseEntity.m_fadeMinDist = GetOffset("DT_BaseEntity", "m_fadeMinDist");
	DT_BaseEntity.m_fadeMaxDist = GetOffset("DT_BaseEntity", "m_fadeMaxDist");
	DT_BaseEntity.m_flFadeScale = GetOffset("DT_BaseEntity", "m_flFadeScale");
	DT_BaseEntity.m_nMinCPULevel = GetOffset("DT_BaseEntity", "m_nMinCPULevel");
	DT_BaseEntity.m_nMaxCPULevel = GetOffset("DT_BaseEntity", "m_nMaxCPULevel");
	DT_BaseEntity.m_nMinGPULevel = GetOffset("DT_BaseEntity", "m_nMinGPULevel");
	DT_BaseEntity.m_nMaxGPULevel = GetOffset("DT_BaseEntity", "m_nMaxGPULevel");
	DT_BaseEntity.m_flUseLookAtAngle = GetOffset("DT_BaseEntity", "m_flUseLookAtAngle");
	DT_BaseEntity.m_flLastMadeNoiseTime = GetOffset("DT_BaseEntity", "m_flLastMadeNoiseTime");
	DT_BaseEntity.m_flMaxFallVelocity = GetOffset("DT_BaseEntity", "m_flMaxFallVelocity");
	DT_BaseEntity.m_bEligibleForScreenHighlight = GetOffset("DT_BaseEntity", "m_bEligibleForScreenHighlight");
	DT_BaseDoor.m_flWaveHeight = GetOffset("DT_BaseDoor", "m_flWaveHeight");
	DT_BaseCombatCharacter.bcc_localdata = GetOffset("DT_BaseCombatCharacter", "bcc_localdata");
	DT_BaseCombatCharacter.bcc_nonlocaldata = GetOffset("DT_BaseCombatCharacter", "bcc_nonlocaldata");
	DT_BaseCombatCharacter.m_LastHitGroup = GetOffset("DT_BaseCombatCharacter", "m_LastHitGroup");
	DT_BaseCombatCharacter.m_hActiveWeapon = GetOffset("DT_BaseCombatCharacter", "m_hActiveWeapon");
	DT_BaseCombatCharacter.m_flTimeOfLastInjury = GetOffset("DT_BaseCombatCharacter", "m_flTimeOfLastInjury");
	DT_BaseCombatCharacter.m_nRelativeDirectionOfLastInjury = GetOffset("DT_BaseCombatCharacter", "m_nRelativeDirectionOfLastInjury");
	DT_BaseCombatCharacter.m_hMyWeapons = GetOffset("DT_BaseCombatCharacter", "m_hMyWeapons");
	DT_BaseCombatCharacter.m_hMyWearables = GetOffset("DT_BaseCombatCharacter", "m_hMyWearables");
	DT_BaseAnimatingOverlay.overlay_vars = GetOffset("DT_BaseAnimatingOverlay", "overlay_vars");
	DT_BoneFollower.m_modelIndex = GetOffset("DT_BoneFollower", "m_modelIndex");
	DT_BoneFollower.m_solidIndex = GetOffset("DT_BoneFollower", "m_solidIndex");
	DT_BaseAnimating.m_nSequence = GetOffset("DT_BaseAnimating", "m_nSequence");
	DT_BaseAnimating.m_nForceBone = GetOffset("DT_BaseAnimating", "m_nForceBone");
	DT_BaseAnimating.m_vecForce = GetOffset("DT_BaseAnimating", "m_vecForce");
	DT_BaseAnimating.m_nSkin = GetOffset("DT_BaseAnimating", "m_nSkin");
	DT_BaseAnimating.m_nBody = GetOffset("DT_BaseAnimating", "m_nBody");
	DT_BaseAnimating.m_nHitboxSet = GetOffset("DT_BaseAnimating", "m_nHitboxSet");
	DT_BaseAnimating.m_flModelScale = GetOffset("DT_BaseAnimating", "m_flModelScale");
	DT_BaseAnimating.m_flPoseParameter = GetOffset("DT_BaseAnimating", "m_flPoseParameter");
	DT_BaseAnimating.m_flPlaybackRate = GetOffset("DT_BaseAnimating", "m_flPlaybackRate");
	DT_BaseAnimating.m_flEncodedController = GetOffset("DT_BaseAnimating", "m_flEncodedController");
	DT_BaseAnimating.m_bClientSideAnimation = GetOffset("DT_BaseAnimating", "m_bClientSideAnimation");
	DT_BaseAnimating.m_bClientSideFrameReset = GetOffset("DT_BaseAnimating", "m_bClientSideFrameReset");
	DT_BaseAnimating.m_bClientSideRagdoll = GetOffset("DT_BaseAnimating", "m_bClientSideRagdoll");
	DT_BaseAnimating.m_nNewSequenceParity = GetOffset("DT_BaseAnimating", "m_nNewSequenceParity");
	DT_BaseAnimating.m_nResetEventsParity = GetOffset("DT_BaseAnimating", "m_nResetEventsParity");
	DT_BaseAnimating.m_nMuzzleFlashParity = GetOffset("DT_BaseAnimating", "m_nMuzzleFlashParity");
	DT_BaseAnimating.m_hLightingOrigin = GetOffset("DT_BaseAnimating", "m_hLightingOrigin");
	DT_BaseAnimating.serveranimdata = GetOffset("DT_BaseAnimating", "serveranimdata");
	DT_BaseAnimating.m_flFrozen = GetOffset("DT_BaseAnimating", "m_flFrozen");
	DT_BaseAnimating.m_ScaleType = GetOffset("DT_BaseAnimating", "m_ScaleType");
	DT_BaseAnimating.m_bSuppressAnimSounds = GetOffset("DT_BaseAnimating", "m_bSuppressAnimSounds");
	DT_BaseAnimating.m_nHighlightColorR = GetOffset("DT_BaseAnimating", "m_nHighlightColorR");
	DT_BaseAnimating.m_nHighlightColorG = GetOffset("DT_BaseAnimating", "m_nHighlightColorG");
	DT_BaseAnimating.m_nHighlightColorB = GetOffset("DT_BaseAnimating", "m_nHighlightColorB");
	DT_AI_BaseNPC.m_lifeState = GetOffset("DT_AI_BaseNPC", "m_lifeState");
	DT_AI_BaseNPC.m_bPerformAvoidance = GetOffset("DT_AI_BaseNPC", "m_bPerformAvoidance");
	DT_AI_BaseNPC.m_bIsMoving = GetOffset("DT_AI_BaseNPC", "m_bIsMoving");
	DT_AI_BaseNPC.m_bFadeCorpse = GetOffset("DT_AI_BaseNPC", "m_bFadeCorpse");
	DT_AI_BaseNPC.m_iDeathPose = GetOffset("DT_AI_BaseNPC", "m_iDeathPose");
	DT_AI_BaseNPC.m_iDeathFrame = GetOffset("DT_AI_BaseNPC", "m_iDeathFrame");
	DT_AI_BaseNPC.m_iSpeedModRadius = GetOffset("DT_AI_BaseNPC", "m_iSpeedModRadius");
	DT_AI_BaseNPC.m_iSpeedModSpeed = GetOffset("DT_AI_BaseNPC", "m_iSpeedModSpeed");
	DT_AI_BaseNPC.m_bSpeedModActive = GetOffset("DT_AI_BaseNPC", "m_bSpeedModActive");
	DT_AI_BaseNPC.m_bImportanRagdoll = GetOffset("DT_AI_BaseNPC", "m_bImportanRagdoll");
	DT_AI_BaseNPC.m_flTimePingEffect = GetOffset("DT_AI_BaseNPC", "m_flTimePingEffect");
	DT_Beam.m_nBeamType = GetOffset("DT_Beam", "m_nBeamType");
	DT_Beam.m_nBeamFlags = GetOffset("DT_Beam", "m_nBeamFlags");
	DT_Beam.m_nNumBeamEnts = GetOffset("DT_Beam", "m_nNumBeamEnts");
	DT_Beam.m_hAttachEntity = GetOffset("DT_Beam", "m_hAttachEntity");
	DT_Beam.m_nAttachIndex = GetOffset("DT_Beam", "m_nAttachIndex");
	DT_Beam.m_nHaloIndex = GetOffset("DT_Beam", "m_nHaloIndex");
	DT_Beam.m_fHaloScale = GetOffset("DT_Beam", "m_fHaloScale");
	DT_Beam.m_fWidth = GetOffset("DT_Beam", "m_fWidth");
	DT_Beam.m_fEndWidth = GetOffset("DT_Beam", "m_fEndWidth");
	DT_Beam.m_fFadeLength = GetOffset("DT_Beam", "m_fFadeLength");
	DT_Beam.m_fAmplitude = GetOffset("DT_Beam", "m_fAmplitude");
	DT_Beam.m_fStartFrame = GetOffset("DT_Beam", "m_fStartFrame");
	DT_Beam.m_fSpeed = GetOffset("DT_Beam", "m_fSpeed");
	DT_Beam.m_flFrameRate = GetOffset("DT_Beam", "m_flFrameRate");
	DT_Beam.m_flHDRColorScale = GetOffset("DT_Beam", "m_flHDRColorScale");
	DT_Beam.m_clrRender = GetOffset("DT_Beam", "m_clrRender");
	DT_Beam.m_nRenderFX = GetOffset("DT_Beam", "m_nRenderFX");
	DT_Beam.m_nRenderMode = GetOffset("DT_Beam", "m_nRenderMode");
	DT_Beam.m_flFrame = GetOffset("DT_Beam", "m_flFrame");
	DT_Beam.m_nClipStyle = GetOffset("DT_Beam", "m_nClipStyle");
	DT_Beam.m_vecEndPos = GetOffset("DT_Beam", "m_vecEndPos");
	DT_Beam.m_nModelIndex = GetOffset("DT_Beam", "m_nModelIndex");
	DT_Beam.m_vecOrigin = GetOffset("DT_Beam", "m_vecOrigin");
	DT_Beam.moveparent = GetOffset("DT_Beam", "moveparent");
	DT_BaseViewModel.m_nModelIndex = GetOffset("DT_BaseViewModel", "m_nModelIndex");
	DT_BaseViewModel.m_hWeapon = GetOffset("DT_BaseViewModel", "m_hWeapon");
	DT_BaseViewModel.m_nSkin = GetOffset("DT_BaseViewModel", "m_nSkin");
	DT_BaseViewModel.m_nBody = GetOffset("DT_BaseViewModel", "m_nBody");
	DT_BaseViewModel.m_nSequence = GetOffset("DT_BaseViewModel", "m_nSequence");
	DT_BaseViewModel.m_nViewModelIndex = GetOffset("DT_BaseViewModel", "m_nViewModelIndex");
	DT_BaseViewModel.m_flPlaybackRate = GetOffset("DT_BaseViewModel", "m_flPlaybackRate");
	DT_BaseViewModel.m_fEffects = GetOffset("DT_BaseViewModel", "m_fEffects");
	DT_BaseViewModel.m_nAnimationParity = GetOffset("DT_BaseViewModel", "m_nAnimationParity");
	DT_BaseViewModel.m_hOwner = GetOffset("DT_BaseViewModel", "m_hOwner");
	DT_BaseViewModel.m_nNewSequenceParity = GetOffset("DT_BaseViewModel", "m_nNewSequenceParity");
	DT_BaseViewModel.m_nResetEventsParity = GetOffset("DT_BaseViewModel", "m_nResetEventsParity");
	DT_BaseViewModel.m_nMuzzleFlashParity = GetOffset("DT_BaseViewModel", "m_nMuzzleFlashParity");
	DT_BaseViewModel.m_bShouldIgnoreOffsetAndAccuracy = GetOffset("DT_BaseViewModel", "m_bShouldIgnoreOffsetAndAccuracy");
	DT_BaseGrenade.m_flDamage = GetOffset("DT_BaseGrenade", "m_flDamage");
	DT_BaseGrenade.m_DmgRadius = GetOffset("DT_BaseGrenade", "m_DmgRadius");
	DT_BaseGrenade.m_bIsLive = GetOffset("DT_BaseGrenade", "m_bIsLive");
	DT_BaseGrenade.m_hThrower = GetOffset("DT_BaseGrenade", "m_hThrower");
	DT_BaseGrenade.m_vecVelocity = GetOffset("DT_BaseGrenade", "m_vecVelocity");
	DT_BaseGrenade.m_fFlags = GetOffset("DT_BaseGrenade", "m_fFlags");
	DT_BaseCombatWeapon.LocalWeaponData = GetOffset("DT_BaseCombatWeapon", "LocalWeaponData");
	DT_BaseCombatWeapon.LocalActiveWeaponData = GetOffset("DT_BaseCombatWeapon", "LocalActiveWeaponData");
	DT_BaseCombatWeapon.m_iViewModelIndex = GetOffset("DT_BaseCombatWeapon", "m_iViewModelIndex");
	DT_BaseCombatWeapon.m_iWorldModelIndex = GetOffset("DT_BaseCombatWeapon", "m_iWorldModelIndex");
	DT_BaseCombatWeapon.m_iWorldDroppedModelIndex = GetOffset("DT_BaseCombatWeapon", "m_iWorldDroppedModelIndex");
	DT_BaseCombatWeapon.m_iState = GetOffset("DT_BaseCombatWeapon", "m_iState");
	DT_BaseCombatWeapon.m_hOwner = GetOffset("DT_BaseCombatWeapon", "m_hOwner");
	DT_BaseCombatWeapon.m_iClip1 = GetOffset("DT_BaseCombatWeapon", "m_iClip1");
	DT_BaseCombatWeapon.m_iClip2 = GetOffset("DT_BaseCombatWeapon", "m_iClip2");
	DT_BaseCombatWeapon.m_iPrimaryReserveAmmoCount = GetOffset("DT_BaseCombatWeapon", "m_iPrimaryReserveAmmoCount");
	DT_BaseCombatWeapon.m_iSecondaryReserveAmmoCount = GetOffset("DT_BaseCombatWeapon", "m_iSecondaryReserveAmmoCount");
	DT_BaseCombatWeapon.m_hWeaponWorldModel = GetOffset("DT_BaseCombatWeapon", "m_hWeaponWorldModel");
	DT_BaseCombatWeapon.m_iNumEmptyAttacks = GetOffset("DT_BaseCombatWeapon", "m_iNumEmptyAttacks");
	DT_BaseWeaponWorldModel.m_nModelIndex = GetOffset("DT_BaseWeaponWorldModel", "m_nModelIndex");
	DT_BaseWeaponWorldModel.m_nBody = GetOffset("DT_BaseWeaponWorldModel", "m_nBody");
	DT_BaseWeaponWorldModel.m_fEffects = GetOffset("DT_BaseWeaponWorldModel", "m_fEffects");
	DT_BaseWeaponWorldModel.moveparent = GetOffset("DT_BaseWeaponWorldModel", "moveparent");
	DT_BaseWeaponWorldModel.m_hCombatWeaponParent = GetOffset("DT_BaseWeaponWorldModel", "m_hCombatWeaponParent");

}

std::string ReplaceString(std::string subject, const std::string& search,const std::string& replace) 
{
	size_t pos = 0;
	while ((pos = subject.find(search, pos)) != std::string::npos) {
		subject.replace(pos, search.length(), replace);
		pos += replace.length();
	}
	return subject;
}

inline int CNetvar::DumpStructs()
{
	ClientClass *clientClass = Interfaces->Client->GetAllClasses();
	if (!clientClass)
		return -1;

	std::fstream file("StructDefinitions.txt",std::fstream::out); // in CSGO dir folder

	if (!file.is_open())
		return -1;

	
	while (clientClass)
	{
		RecvTable * recvTable = clientClass->m_pRecvTable;

		std::vector<std::string> netvars;
		if (recvTable->m_nProps > 1)
		{
			file <<"struct\n{"<< std::endl;
			for (size_t i = 0; i < recvTable->m_nProps; i++)
			{
				RecvProp prop = recvTable->m_pProps[i];

				if (strstr(prop.m_pVarName, "[1]") == 0 &&
					strstr(prop.m_pVarName, "[2]") == 0 &&
					strstr(prop.m_pVarName, "[3]") == 0 &&
					strstr(prop.m_pVarName, "baseclass") == 0)
				{
					std::string str = ReplaceString(ReplaceString(prop.m_pVarName, ".", "_"), "[0]", "");
					if (std::find(netvars.begin(), netvars.end(), str) == netvars.end())
					{
						file << "	int " << str << " = 0;" << std::endl;
					}
					netvars.push_back(str);
				}

			}
			file << "}" << recvTable->m_pNetTableName  << ";" << std::endl << std::endl;
			
		}
		clientClass = clientClass->m_pNext;
	}
	file.close();
	return -1;
}
inline int CNetvar::DumpStructMembers()
{
	ClientClass *clientClass = Interfaces->Client->GetAllClasses();
	if (!clientClass)
		return -1;

	std::fstream file("StructMembers.txt", std::fstream::out); // in CSGO dir folder

	if (!file.is_open())
		return -1;

	
	while (clientClass)
	{
		std::vector<std::string> netvars;

		RecvTable * recvTable = clientClass->m_pRecvTable;

		if (recvTable->m_nProps > 1)
		{

			for (size_t i = 0; i < recvTable->m_nProps; i++)
			{
				RecvProp prop = recvTable->m_pProps[i];

				if (strstr(prop.m_pVarName, "[1]") == 0 &&
					strstr(prop.m_pVarName, "[2]") == 0 &&
					strstr(prop.m_pVarName, "[3]") == 0 &&
					strstr(prop.m_pVarName, "baseclass") == 0)
				{
					std::string str = ReplaceString(ReplaceString(prop.m_pVarName, ".", "_"), "[0]", "");
					if (std::find(netvars.begin(), netvars.end(), str) == netvars.end())
					{
						file << recvTable->m_pNetTableName << "." << str << " = GetOffset(\"" << recvTable->m_pNetTableName << "\", \"" << prop.m_pVarName << "\");" << std::endl;
					}
					
					netvars.push_back(str);
				}
				
			}

		}
		clientClass = clientClass->m_pNext;
	}
	file.close();
	return -1;
}
int SearchRecursive(RecvTable * table, const char * netvar)
{
	for (size_t i = 0; i < table->m_nProps; i++)
	{
		RecvProp prop = table->m_pProps[i];

		if (prop.m_RecvType == 6)
			if (int offset = SearchRecursive(prop.m_pDataTable, netvar))
				return offset;
			
		if (!strcmp(prop.m_pVarName, netvar))
			return prop.m_Offset;
	}
	return 0;
}
inline int CNetvar::GetOffset(const char * table, const char * netvar)
{
	ClientClass *clientClass = Interfaces->Client->GetAllClasses();
	if (!clientClass)
		return 0;

	while (clientClass)
	{
		RecvTable * recvTable = clientClass->m_pRecvTable;

		if (!strcmp(recvTable->m_pNetTableName, table))
			return SearchRecursive(recvTable, netvar);

		clientClass = clientClass->m_pNext;
	}
	return 0;
}

int CNetvar::DumpRecursive(RecvTable * table)
{
	static bool lastwasnetvar = false;
	static bool isDeep = false;

	File << table->m_pNetTableName << ":";

	for (size_t i = 0; i < table->m_nProps; i++)
	{
		RecvProp prop = table->m_pProps[i];

		if (prop.m_RecvType == 6)
		{
			if (lastwasnetvar)
				File << std::endl, lastwasnetvar = false;
			isDeep = true;
			lastwasnetvar = false;
			DumpRecursive(prop.m_pDataTable);
		}
		else
		{
			std::string str = "|__" + std::string(prop.m_pVarName) + "_________________________________________";
			if (str.size() > 40)
				str.resize(40);		
			File << std::endl << str.c_str() << "0x" << std::hex << table->m_pProps[0].m_Offset + prop.m_Offset << std::dec, lastwasnetvar = true;
		}

	}
	if (lastwasnetvar && !isDeep)
		File << std::endl, lastwasnetvar = false;

	isDeep = false;
	return 0;
}
void CNetvar::DumpNetvars()
{
	ClientClass *clientClass = Interfaces->Client->GetAllClasses();
	if (!clientClass)
		return;

	File.open("OneshotsSDKNetvars.txt", std::fstream::out);
	if (File.is_open())
	{
		while (clientClass)
		{
			RecvTable * recvTable = clientClass->m_pRecvTable;
			DumpRecursive(recvTable);
			clientClass = clientClass->m_pNext;
		}
	}

	File.close();
}
